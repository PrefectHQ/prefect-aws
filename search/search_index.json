{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-aws Welcome! prefect-aws is a collection of pre-built Prefect tasks that can be used to quickly construct Prefect flows that interact with Amazon Web Services. Getting Started Python setup Requires an installation of Python 3.7+ We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-aws pip install prefect-aws AWS Authentication You will need to obtain AWS credentials in order to use these tasks. Refer to the AWS documentation for authentication methods available. Write and run a flow from prefect import flow from prefect_aws import s3_upload @flow def example_s3_upload_flow (): aws_credentials = AwsCredentials ( aws_access_key_id = \"acccess_key_id\" , aws_secret_access_key = \"secret_access_key\" ) with open ( \"data.csv\" , \"rb\" ) as file : key = s3_upload ( bucket = \"bucket\" , key = \"data.csv\" , data = file . read (), aws_credentials = aws_credentials , ) example_s3_upload_flow () Next steps Refer to the API documentation in the side menu to explore all the capabilities of Prefect AWS! Resources If you encounter and bugs while using prefect-aws , feel free to open an issue in the prefect-aws repository. If you have any questions or issues while using prefect-aws , you can find help in either the Prefect Discourse forum or the Prefect Slack community Development If you'd like to install a version of prefect-aws for development, first clone the repository and then perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-aws.git cd prefect-aws/ pip install -e \".[dev]\"","title":"Home"},{"location":"#prefect-aws","text":"","title":"prefect-aws"},{"location":"#welcome","text":"prefect-aws is a collection of pre-built Prefect tasks that can be used to quickly construct Prefect flows that interact with Amazon Web Services.","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+ We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-aws pip install prefect-aws","title":"Installation"},{"location":"#aws-authentication","text":"You will need to obtain AWS credentials in order to use these tasks. Refer to the AWS documentation for authentication methods available.","title":"AWS Authentication"},{"location":"#write-and-run-a-flow","text":"from prefect import flow from prefect_aws import s3_upload @flow def example_s3_upload_flow (): aws_credentials = AwsCredentials ( aws_access_key_id = \"acccess_key_id\" , aws_secret_access_key = \"secret_access_key\" ) with open ( \"data.csv\" , \"rb\" ) as file : key = s3_upload ( bucket = \"bucket\" , key = \"data.csv\" , data = file . read (), aws_credentials = aws_credentials , ) example_s3_upload_flow ()","title":"Write and run a flow"},{"location":"#next-steps","text":"Refer to the API documentation in the side menu to explore all the capabilities of Prefect AWS!","title":"Next steps"},{"location":"#resources","text":"If you encounter and bugs while using prefect-aws , feel free to open an issue in the prefect-aws repository. If you have any questions or issues while using prefect-aws , you can find help in either the Prefect Discourse forum or the Prefect Slack community","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-aws for development, first clone the repository and then perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-aws.git cd prefect-aws/ pip install -e \".[dev]\"","title":"Development"},{"location":"credentials/","text":"prefect_aws.credentials Module handling AWS credentials AwsCredentials dataclass Dataclass used to manage authentication with AWS. AWS authentication is handled via the boto3 module. Refer to the boto3 docs for more info about the possible credential configurations. Parameters: Name Type Description Default aws_access_key_id Optional[str] A specific AWS access key ID. None aws_secret_access_key Optional[str] A specific AWS secret access key. None aws_session_token Optional[str] The session key for your AWS account. This is only needed when you are using temporary credentials. None profile_name Optional[str] The profile to use when creating your session. None region_name Optional[str] The AWS Region where you want to create new connections. None Source code in prefect_aws/credentials.py class AwsCredentials : \"\"\" Dataclass used to manage authentication with AWS. AWS authentication is handled via the `boto3` module. Refer to the [boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for more info about the possible credential configurations. Args: aws_access_key_id: A specific AWS access key ID. aws_secret_access_key: A specific AWS secret access key. aws_session_token: The session key for your AWS account. This is only needed when you are using temporary credentials. profile_name: The profile to use when creating your session. region_name: The AWS Region where you want to create new connections. \"\"\" # noqa E501 aws_access_key_id : Optional [ str ] = None aws_secret_access_key : Optional [ str ] = None aws_session_token : Optional [ str ] = None profile_name : Optional [ str ] = None region_name : Optional [ str ] = None def get_boto3_session ( self ): \"\"\" Returns an authenticated boto3 session that can be used to create clients for AWS services Example: Create an S3 client from an authorized boto3 session >>> aws_credentials = AwsCredentials( >>> aws_access_key_id = \"access_key_id\", >>> aws_secret_access_key = \"secret_access_key\" >>> ) >>> s3_client = aws_credentials.get_boto3_session().client(\"s3\") \"\"\" return boto3 . Session ( aws_access_key_id = self . aws_access_key_id , aws_secret_access_key = self . aws_secret_access_key , aws_session_token = self . aws_session_token , profile_name = self . profile_name , region_name = self . region_name , ) get_boto3_session Returns an authenticated boto3 session that can be used to create clients for AWS services Examples: Create an S3 client from an authorized boto3 session >>> aws_credentials = AwsCredentials ( >>> aws_access_key_id = \"access_key_id\" , >>> aws_secret_access_key = \"secret_access_key\" >>> ) >>> s3_client = aws_credentials . get_boto3_session () . client ( \"s3\" ) Source code in prefect_aws/credentials.py def get_boto3_session ( self ): \"\"\" Returns an authenticated boto3 session that can be used to create clients for AWS services Example: Create an S3 client from an authorized boto3 session >>> aws_credentials = AwsCredentials( >>> aws_access_key_id = \"access_key_id\", >>> aws_secret_access_key = \"secret_access_key\" >>> ) >>> s3_client = aws_credentials.get_boto3_session().client(\"s3\") \"\"\" return boto3 . Session ( aws_access_key_id = self . aws_access_key_id , aws_secret_access_key = self . aws_secret_access_key , aws_session_token = self . aws_session_token , profile_name = self . profile_name , region_name = self . region_name , )","title":"Credentials"},{"location":"credentials/#prefect_aws.credentials","text":"Module handling AWS credentials","title":"credentials"},{"location":"credentials/#prefect_aws.credentials.AwsCredentials","text":"Dataclass used to manage authentication with AWS. AWS authentication is handled via the boto3 module. Refer to the boto3 docs for more info about the possible credential configurations. Parameters: Name Type Description Default aws_access_key_id Optional[str] A specific AWS access key ID. None aws_secret_access_key Optional[str] A specific AWS secret access key. None aws_session_token Optional[str] The session key for your AWS account. This is only needed when you are using temporary credentials. None profile_name Optional[str] The profile to use when creating your session. None region_name Optional[str] The AWS Region where you want to create new connections. None Source code in prefect_aws/credentials.py class AwsCredentials : \"\"\" Dataclass used to manage authentication with AWS. AWS authentication is handled via the `boto3` module. Refer to the [boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for more info about the possible credential configurations. Args: aws_access_key_id: A specific AWS access key ID. aws_secret_access_key: A specific AWS secret access key. aws_session_token: The session key for your AWS account. This is only needed when you are using temporary credentials. profile_name: The profile to use when creating your session. region_name: The AWS Region where you want to create new connections. \"\"\" # noqa E501 aws_access_key_id : Optional [ str ] = None aws_secret_access_key : Optional [ str ] = None aws_session_token : Optional [ str ] = None profile_name : Optional [ str ] = None region_name : Optional [ str ] = None def get_boto3_session ( self ): \"\"\" Returns an authenticated boto3 session that can be used to create clients for AWS services Example: Create an S3 client from an authorized boto3 session >>> aws_credentials = AwsCredentials( >>> aws_access_key_id = \"access_key_id\", >>> aws_secret_access_key = \"secret_access_key\" >>> ) >>> s3_client = aws_credentials.get_boto3_session().client(\"s3\") \"\"\" return boto3 . Session ( aws_access_key_id = self . aws_access_key_id , aws_secret_access_key = self . aws_secret_access_key , aws_session_token = self . aws_session_token , profile_name = self . profile_name , region_name = self . region_name , )","title":"AwsCredentials"},{"location":"credentials/#prefect_aws.credentials.AwsCredentials.get_boto3_session","text":"Returns an authenticated boto3 session that can be used to create clients for AWS services Examples: Create an S3 client from an authorized boto3 session >>> aws_credentials = AwsCredentials ( >>> aws_access_key_id = \"access_key_id\" , >>> aws_secret_access_key = \"secret_access_key\" >>> ) >>> s3_client = aws_credentials . get_boto3_session () . client ( \"s3\" ) Source code in prefect_aws/credentials.py def get_boto3_session ( self ): \"\"\" Returns an authenticated boto3 session that can be used to create clients for AWS services Example: Create an S3 client from an authorized boto3 session >>> aws_credentials = AwsCredentials( >>> aws_access_key_id = \"access_key_id\", >>> aws_secret_access_key = \"secret_access_key\" >>> ) >>> s3_client = aws_credentials.get_boto3_session().client(\"s3\") \"\"\" return boto3 . Session ( aws_access_key_id = self . aws_access_key_id , aws_secret_access_key = self . aws_secret_access_key , aws_session_token = self . aws_session_token , profile_name = self . profile_name , region_name = self . region_name , )","title":"get_boto3_session()"},{"location":"s3/","text":"prefect_aws.s3 Tasks for interacting with AWS S3 s3_download async Downloads an object with a given key from a given S3 bucket. Parameters: Name Type Description Default bucket str Name of bucket to download object from. Required if a default value was not supplied when creating the task. required key str Key of object to download. Required if a default value was not supplied when creating the task. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required Returns: Type Description bytes A bytes representation of the downloaded object. Examples: Download a file from an S3 bucket: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_download @flow async def example_s3_download_flow (): aws_credentials = AwsCredentials ( aws_access_key_id = \"acccess_key_id\" , aws_secret_access_key = \"secret_access_key\" ) data = await s3_download ( bucket = \"bucket\" , key = \"key\" , aws_credentials = aws_credentials , ) example_s3_download_flow () Source code in prefect_aws/s3.py @task async def s3_download ( bucket : str , key : str , aws_credentials : AwsCredentials , ) -> bytes : \"\"\" Downloads an object with a given key from a given S3 bucket. Args: bucket: Name of bucket to download object from. Required if a default value was not supplied when creating the task. key: Key of object to download. Required if a default value was not supplied when creating the task. aws_credentials: Credentials to use for authentication with AWS. Returns: A `bytes` representation of the downloaded object. Example: Download a file from an S3 bucket: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_download @flow async def example_s3_download_flow(): aws_credentials = AwsCredentials( aws_access_key_id=\"acccess_key_id\", aws_secret_access_key=\"secret_access_key\" ) data = await s3_download( bucket=\"bucket\", key=\"key\", aws_credentials=aws_credentials, ) example_s3_download_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Downloading object from bucket %s with key %s \" , bucket , key ) s3_client = aws_credentials . get_boto3_session () . client ( \"s3\" ) stream = io . BytesIO () download = partial ( s3_client . download_fileobj , Bucket = bucket , Key = key , Fileobj = stream ) await to_thread . run_sync ( download ) stream . seek ( 0 ) output = stream . read () return output s3_list_objects async Lists details of objects in a given S3 bucket. Parameters: Name Type Description Default bucket str Name of bucket to list items from. Required if a default value was not supplied when creating the task. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required prefix str Used to filter objects with keys starting with the specified prefix. '' delimiter str Character used to group keys of listed objects. '' page_size Optional[int] Number of objects to return in each request to the AWS API. None max_items Optional[int] Maximum number of objects that to be returned by task. None jmespath_query Optional[str] Query used to filter objects based on object attributes refer to the boto3 docs for more information on how to construct queries. None Returns: Type Description List[Dict[str, Any]] A list of dictionaries containing information about the objects retrieved. Refer to the boto3 docs for an example response. Examples: List all objects in a bucket: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_list_objects @flow async def example_s3_list_objects_flow (): aws_credentials = AwsCredentials ( aws_access_key_id = \"acccess_key_id\" , aws_secret_access_key = \"secret_access_key\" ) objects = await s3_list_objects ( bucket = \"data_bucket\" , aws_credentials = aws_credentials ) example_s3_list_objects_flow () Source code in prefect_aws/s3.py @task async def s3_list_objects ( bucket : str , aws_credentials : AwsCredentials , prefix : str = \"\" , delimiter : str = \"\" , page_size : Optional [ int ] = None , max_items : Optional [ int ] = None , jmespath_query : Optional [ str ] = None , ) -> List [ Dict [ str , Any ]]: \"\"\" Lists details of objects in a given S3 bucket. Args: bucket: Name of bucket to list items from. Required if a default value was not supplied when creating the task. aws_credentials: Credentials to use for authentication with AWS. prefix: Used to filter objects with keys starting with the specified prefix. delimiter: Character used to group keys of listed objects. page_size: Number of objects to return in each request to the AWS API. max_items: Maximum number of objects that to be returned by task. jmespath_query: Query used to filter objects based on object attributes refer to the [boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/paginators.html#filtering-results-with-jmespath) for more information on how to construct queries. Returns: A list of dictionaries containing information about the objects retrieved. Refer to the boto3 docs for an example response. Example: List all objects in a bucket: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_list_objects @flow async def example_s3_list_objects_flow(): aws_credentials = AwsCredentials( aws_access_key_id=\"acccess_key_id\", aws_secret_access_key=\"secret_access_key\" ) objects = await s3_list_objects( bucket=\"data_bucket\", aws_credentials=aws_credentials ) example_s3_list_objects_flow() ``` \"\"\" # noqa E501 logger = get_run_logger () logger . info ( \"Listing objects in bucket %s with prefix %s \" , bucket , prefix ) s3_client = aws_credentials . get_boto3_session () . client ( \"s3\" ) paginator = s3_client . get_paginator ( \"list_objects_v2\" ) page_iterator = paginator . paginate ( Bucket = bucket , Prefix = prefix , Delimiter = delimiter , PaginationConfig = { \"PageSize\" : page_size , \"MaxItems\" : max_items }, ) if jmespath_query : page_iterator = page_iterator . search ( f \" { jmespath_query } | {{ Contents: @ }} \" ) return await to_thread . run_sync ( _list_objects_sync , page_iterator ) s3_upload async Uploads data to an S3 bucket. Parameters: Name Type Description Default data bytes Bytes representation of data to upload to S3. required bucket str Name of bucket to upload data to. Required if a default value was not supplied when creating the task. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required key Optional[str] Key of object to download. Defaults to a UUID string. None Returns: Type Description str The key of the uploaded object Examples: Read and upload a file to an S3 bucket: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_upload @flow async def example_s3_upload_flow (): aws_credentials = AwsCredentials ( aws_access_key_id = \"acccess_key_id\" , aws_secret_access_key = \"secret_access_key\" ) with open ( \"data.csv\" , \"rb\" ) as file : key = await s3_upload ( bucket = \"bucket\" , key = \"data.csv\" , data = file . read (), aws_credentials = aws_credentials , ) example_s3_upload_flow () Source code in prefect_aws/s3.py @task async def s3_upload ( data : bytes , bucket : str , aws_credentials : AwsCredentials , key : Optional [ str ] = None , ) -> str : \"\"\" Uploads data to an S3 bucket. Args: data: Bytes representation of data to upload to S3. bucket: Name of bucket to upload data to. Required if a default value was not supplied when creating the task. aws_credentials: Credentials to use for authentication with AWS. key: Key of object to download. Defaults to a UUID string. Returns: The key of the uploaded object Example: Read and upload a file to an S3 bucket: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_upload @flow async def example_s3_upload_flow(): aws_credentials = AwsCredentials( aws_access_key_id=\"acccess_key_id\", aws_secret_access_key=\"secret_access_key\" ) with open(\"data.csv\", \"rb\") as file: key = await s3_upload( bucket=\"bucket\", key=\"data.csv\", data=file.read(), aws_credentials=aws_credentials, ) example_s3_upload_flow() ``` \"\"\" logger = get_run_logger () key = key or str ( uuid . uuid4 ()) logger . info ( \"Uploading object to bucket %s with key %s \" , bucket , key ) s3_client = aws_credentials . get_boto3_session () . client ( \"s3\" ) stream = io . BytesIO ( data ) upload = partial ( s3_client . upload_fileobj , stream , Bucket = bucket , Key = key ) await to_thread . run_sync ( upload ) return key","title":"S3"},{"location":"s3/#prefect_aws.s3","text":"Tasks for interacting with AWS S3","title":"s3"},{"location":"s3/#prefect_aws.s3.s3_download","text":"Downloads an object with a given key from a given S3 bucket. Parameters: Name Type Description Default bucket str Name of bucket to download object from. Required if a default value was not supplied when creating the task. required key str Key of object to download. Required if a default value was not supplied when creating the task. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required Returns: Type Description bytes A bytes representation of the downloaded object. Examples: Download a file from an S3 bucket: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_download @flow async def example_s3_download_flow (): aws_credentials = AwsCredentials ( aws_access_key_id = \"acccess_key_id\" , aws_secret_access_key = \"secret_access_key\" ) data = await s3_download ( bucket = \"bucket\" , key = \"key\" , aws_credentials = aws_credentials , ) example_s3_download_flow () Source code in prefect_aws/s3.py @task async def s3_download ( bucket : str , key : str , aws_credentials : AwsCredentials , ) -> bytes : \"\"\" Downloads an object with a given key from a given S3 bucket. Args: bucket: Name of bucket to download object from. Required if a default value was not supplied when creating the task. key: Key of object to download. Required if a default value was not supplied when creating the task. aws_credentials: Credentials to use for authentication with AWS. Returns: A `bytes` representation of the downloaded object. Example: Download a file from an S3 bucket: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_download @flow async def example_s3_download_flow(): aws_credentials = AwsCredentials( aws_access_key_id=\"acccess_key_id\", aws_secret_access_key=\"secret_access_key\" ) data = await s3_download( bucket=\"bucket\", key=\"key\", aws_credentials=aws_credentials, ) example_s3_download_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Downloading object from bucket %s with key %s \" , bucket , key ) s3_client = aws_credentials . get_boto3_session () . client ( \"s3\" ) stream = io . BytesIO () download = partial ( s3_client . download_fileobj , Bucket = bucket , Key = key , Fileobj = stream ) await to_thread . run_sync ( download ) stream . seek ( 0 ) output = stream . read () return output","title":"s3_download()"},{"location":"s3/#prefect_aws.s3.s3_list_objects","text":"Lists details of objects in a given S3 bucket. Parameters: Name Type Description Default bucket str Name of bucket to list items from. Required if a default value was not supplied when creating the task. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required prefix str Used to filter objects with keys starting with the specified prefix. '' delimiter str Character used to group keys of listed objects. '' page_size Optional[int] Number of objects to return in each request to the AWS API. None max_items Optional[int] Maximum number of objects that to be returned by task. None jmespath_query Optional[str] Query used to filter objects based on object attributes refer to the boto3 docs for more information on how to construct queries. None Returns: Type Description List[Dict[str, Any]] A list of dictionaries containing information about the objects retrieved. Refer to the boto3 docs for an example response. Examples: List all objects in a bucket: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_list_objects @flow async def example_s3_list_objects_flow (): aws_credentials = AwsCredentials ( aws_access_key_id = \"acccess_key_id\" , aws_secret_access_key = \"secret_access_key\" ) objects = await s3_list_objects ( bucket = \"data_bucket\" , aws_credentials = aws_credentials ) example_s3_list_objects_flow () Source code in prefect_aws/s3.py @task async def s3_list_objects ( bucket : str , aws_credentials : AwsCredentials , prefix : str = \"\" , delimiter : str = \"\" , page_size : Optional [ int ] = None , max_items : Optional [ int ] = None , jmespath_query : Optional [ str ] = None , ) -> List [ Dict [ str , Any ]]: \"\"\" Lists details of objects in a given S3 bucket. Args: bucket: Name of bucket to list items from. Required if a default value was not supplied when creating the task. aws_credentials: Credentials to use for authentication with AWS. prefix: Used to filter objects with keys starting with the specified prefix. delimiter: Character used to group keys of listed objects. page_size: Number of objects to return in each request to the AWS API. max_items: Maximum number of objects that to be returned by task. jmespath_query: Query used to filter objects based on object attributes refer to the [boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/paginators.html#filtering-results-with-jmespath) for more information on how to construct queries. Returns: A list of dictionaries containing information about the objects retrieved. Refer to the boto3 docs for an example response. Example: List all objects in a bucket: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_list_objects @flow async def example_s3_list_objects_flow(): aws_credentials = AwsCredentials( aws_access_key_id=\"acccess_key_id\", aws_secret_access_key=\"secret_access_key\" ) objects = await s3_list_objects( bucket=\"data_bucket\", aws_credentials=aws_credentials ) example_s3_list_objects_flow() ``` \"\"\" # noqa E501 logger = get_run_logger () logger . info ( \"Listing objects in bucket %s with prefix %s \" , bucket , prefix ) s3_client = aws_credentials . get_boto3_session () . client ( \"s3\" ) paginator = s3_client . get_paginator ( \"list_objects_v2\" ) page_iterator = paginator . paginate ( Bucket = bucket , Prefix = prefix , Delimiter = delimiter , PaginationConfig = { \"PageSize\" : page_size , \"MaxItems\" : max_items }, ) if jmespath_query : page_iterator = page_iterator . search ( f \" { jmespath_query } | {{ Contents: @ }} \" ) return await to_thread . run_sync ( _list_objects_sync , page_iterator )","title":"s3_list_objects()"},{"location":"s3/#prefect_aws.s3.s3_upload","text":"Uploads data to an S3 bucket. Parameters: Name Type Description Default data bytes Bytes representation of data to upload to S3. required bucket str Name of bucket to upload data to. Required if a default value was not supplied when creating the task. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required key Optional[str] Key of object to download. Defaults to a UUID string. None Returns: Type Description str The key of the uploaded object Examples: Read and upload a file to an S3 bucket: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_upload @flow async def example_s3_upload_flow (): aws_credentials = AwsCredentials ( aws_access_key_id = \"acccess_key_id\" , aws_secret_access_key = \"secret_access_key\" ) with open ( \"data.csv\" , \"rb\" ) as file : key = await s3_upload ( bucket = \"bucket\" , key = \"data.csv\" , data = file . read (), aws_credentials = aws_credentials , ) example_s3_upload_flow () Source code in prefect_aws/s3.py @task async def s3_upload ( data : bytes , bucket : str , aws_credentials : AwsCredentials , key : Optional [ str ] = None , ) -> str : \"\"\" Uploads data to an S3 bucket. Args: data: Bytes representation of data to upload to S3. bucket: Name of bucket to upload data to. Required if a default value was not supplied when creating the task. aws_credentials: Credentials to use for authentication with AWS. key: Key of object to download. Defaults to a UUID string. Returns: The key of the uploaded object Example: Read and upload a file to an S3 bucket: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_upload @flow async def example_s3_upload_flow(): aws_credentials = AwsCredentials( aws_access_key_id=\"acccess_key_id\", aws_secret_access_key=\"secret_access_key\" ) with open(\"data.csv\", \"rb\") as file: key = await s3_upload( bucket=\"bucket\", key=\"data.csv\", data=file.read(), aws_credentials=aws_credentials, ) example_s3_upload_flow() ``` \"\"\" logger = get_run_logger () key = key or str ( uuid . uuid4 ()) logger . info ( \"Uploading object to bucket %s with key %s \" , bucket , key ) s3_client = aws_credentials . get_boto3_session () . client ( \"s3\" ) stream = io . BytesIO ( data ) upload = partial ( s3_client . upload_fileobj , stream , Bucket = bucket , Key = key ) await to_thread . run_sync ( upload ) return key","title":"s3_upload()"},{"location":"secrets_manager/","text":"prefect_aws.secrets_manager Tasks for interacting with AWS Secrets Manager create_secret async Creates a secret in AWS Secrets Manager. Parameters: Name Type Description Default secret_name str The name of the secret to create. required secret_value Union[str, bytes] The value to store in the created secret. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required description Optional[str] A description for the created secret. None tags Optional[List[Dict[str, str]]] A list of tags to attach to the secret. Each tag should be specified as a dictionary in the following format: { \"Key\" : str , \"Value\" : str } None Returns: Type Description Dict[str, str] A dict containing the secret ARN (Amazon Resource Name), name, and current version ID. { \"ARN\" : str , \"Name\" : str , \"VersionId\" : str } Examples: Create a secret: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import create_secret @flow def example_create_secret (): aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) create_secret ( secret_name = \"life_the_universe_and_everything\" , secret_value = \"42\" , aws_credentials = aws_credentials ) example_create_secret () Source code in prefect_aws/secrets_manager.py @task async def create_secret ( secret_name : str , secret_value : Union [ str , bytes ], aws_credentials : AwsCredentials , description : Optional [ str ] = None , tags : Optional [ List [ Dict [ str , str ]]] = None , ) -> Dict [ str , str ]: \"\"\" Creates a secret in AWS Secrets Manager. Args: secret_name: The name of the secret to create. secret_value: The value to store in the created secret. aws_credentials: Credentials to use for authentication with AWS. description: A description for the created secret. tags: A list of tags to attach to the secret. Each tag should be specified as a dictionary in the following format: ```python { \"Key\": str, \"Value\": str } ``` Returns: Dict[str, str]: A dict containing the secret ARN (Amazon Resource Name), name, and current version ID. ```python { \"ARN\": str, \"Name\": str, \"VersionId\": str } ``` Example: Create a secret: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import create_secret @flow def example_create_secret(): aws_credentials = AwsCredentials( aws_access_key_id=\"access_key_id\", aws_secret_access_key=\"secret_access_key\" ) create_secret( secret_name=\"life_the_universe_and_everything\", secret_value=\"42\", aws_credentials=aws_credentials ) example_create_secret() ``` \"\"\" create_secret_kwargs : Dict [ str , Union [ str , bytes , List [ Dict [ str , str ]]]] = dict ( Name = secret_name ) if description is not None : create_secret_kwargs [ \"Description\" ] = description if tags is not None : create_secret_kwargs [ \"Tags\" ] = tags if isinstance ( secret_value , bytes ): create_secret_kwargs [ \"SecretBinary\" ] = secret_value elif isinstance ( secret_value , str ): create_secret_kwargs [ \"SecretString\" ] = secret_value else : raise ValueError ( \"Please provide a bytes or str value for secret_value\" ) logger = get_run_logger () logger . info ( \"Creating secret named %s \" , secret_name ) client = aws_credentials . get_boto3_session () . client ( \"secretsmanager\" ) try : create_secret = partial ( client . create_secret , ** create_secret_kwargs ) response = await to_thread . run_sync ( create_secret ) print ( response . pop ( \"ResponseMetadata\" , None )) return response except ClientError : logger . exception ( \"Unable to create secret %s \" , secret_name ) raise delete_secret async Deletes a secret from AWS Secrets Manager. Secrets can either be deleted immediately by setting force_delete_without_recovery equal to True . Otherwise, secrets will be marked for deletion and available for recovery for the number of days specified in recovery_window_in_days Parameters: Name Type Description Default secret_name str Name of the secret to be deleted. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required recovery_window_in_days int Number of days a secret should be recoverable for before permenant deletion. Minium window is 7 days and maximum window is 30 days. If force_delete_without_recovery is set to True , this value will be ignored. 30 force_delete_without_recovery bool If True , the secret will be immediately deleted and will not be recoverable. False Returns: Type Description Dict[str, str] A dict containing the secret ARN (Amazon Resource Name), name, and deletion date of the secret. DeletionDate is the date and time of the delete request plus the number of days in recovery_window_in_days . { \"ARN\" : str , \"Name\" : str , \"DeletionDate\" : datetime . datetime } Examples: Delete a secret immediately: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import delete_secret @flow def example_delete_secret_immediately (): aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) delete_secret ( secret_name = \"life_the_universe_and_everything\" , aws_credentials = aws_credentials , force_delete_without_recovery : True ) example_delete_secret_immediately () Delete a secret with a 90 day recovery window: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import delete_secret @flow def example_delete_secret_with_recovery_window (): aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) delete_secret ( secret_name = \"life_the_universe_and_everything\" , aws_credentials = aws_credentials , recovery_window_in_days = 90 ) example_delete_secret_with_recovery_window () Source code in prefect_aws/secrets_manager.py @task async def delete_secret ( secret_name : str , aws_credentials : AwsCredentials , recovery_window_in_days : int = 30 , force_delete_without_recovery : bool = False , ): \"\"\" Deletes a secret from AWS Secrets Manager. Secrets can either be deleted immediately by setting `force_delete_without_recovery` equal to `True`. Otherwise, secrets will be marked for deletion and available for recovery for the number of days specified in `recovery_window_in_days` Args: secret_name: Name of the secret to be deleted. aws_credentials: Credentials to use for authentication with AWS. recovery_window_in_days: Number of days a secret should be recoverable for before permenant deletion. Minium window is 7 days and maximum window is 30 days. If `force_delete_without_recovery` is set to `True`, this value will be ignored. force_delete_without_recovery: If `True`, the secret will be immediately deleted and will not be recoverable. Returns: Dict[str, str]: A dict containing the secret ARN (Amazon Resource Name), name, and deletion date of the secret. DeletionDate is the date and time of the delete request plus the number of days in `recovery_window_in_days`. ```python { \"ARN\": str, \"Name\": str, \"DeletionDate\": datetime.datetime } ``` Examples: Delete a secret immediately: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import delete_secret @flow def example_delete_secret_immediately(): aws_credentials = AwsCredentials( aws_access_key_id=\"access_key_id\", aws_secret_access_key=\"secret_access_key\" ) delete_secret( secret_name=\"life_the_universe_and_everything\", aws_credentials=aws_credentials, force_delete_without_recovery: True ) example_delete_secret_immediately() ``` Delete a secret with a 90 day recovery window: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import delete_secret @flow def example_delete_secret_with_recovery_window(): aws_credentials = AwsCredentials( aws_access_key_id=\"access_key_id\", aws_secret_access_key=\"secret_access_key\" ) delete_secret( secret_name=\"life_the_universe_and_everything\", aws_credentials=aws_credentials, recovery_window_in_days=90 ) example_delete_secret_with_recovery_window() ``` \"\"\" if not force_delete_without_recovery and not ( 7 <= recovery_window_in_days <= 30 ): raise ValueError ( \"Recovery window must be between 7 and 30 days.\" ) delete_secret_kwargs : Dict [ str , Union [ str , int , bool ]] = dict ( SecretId = secret_name ) if force_delete_without_recovery : delete_secret_kwargs [ \"ForceDeleteWithoutRecovery\" ] = force_delete_without_recovery else : delete_secret_kwargs [ \"RecoveryWindowInDays\" ] = recovery_window_in_days logger = get_run_logger () logger . info ( \"Deleting secret %s \" , secret_name ) client = aws_credentials . get_boto3_session () . client ( \"secretsmanager\" ) try : delete_secret = partial ( client . delete_secret , ** delete_secret_kwargs ) response = await to_thread . run_sync ( delete_secret ) response . pop ( \"ResponseMetadata\" , None ) return response except ClientError : logger . exception ( \"Unable to delete secret %s \" , secret_name ) raise read_secret async Reads the value of a given secret from AWS Secrets Manager. Parameters: Name Type Description Default secret_name str Name of stored secret. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required version_id Optional[str] Specifies version of secret to read. Defaults to the most recent version if not given. None version_stage Optional[str] Specifies the version stage of the secret to read. Defaults to AWS_CURRENT if not given. None Returns: Type Description Union[str, bytes] The secret values as a str or bytes depending on the format in which the secret was stored. Examples: Read a secret value: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import read_secret @flow def example_read_secret (): aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) secret_value = read_secret ( secret_name = \"db_password\" , aws_credentials = aws_credentials ) example_read_secret () Source code in prefect_aws/secrets_manager.py @task async def read_secret ( secret_name : str , aws_credentials : AwsCredentials , version_id : Optional [ str ] = None , version_stage : Optional [ str ] = None , ) -> Union [ str , bytes ]: \"\"\" Reads the value of a given secret from AWS Secrets Manager. Args: secret_name: Name of stored secret. aws_credentials: Credentials to use for authentication with AWS. version_id: Specifies version of secret to read. Defaults to the most recent version if not given. version_stage: Specifies the version stage of the secret to read. Defaults to AWS_CURRENT if not given. Returns: The secret values as a `str` or `bytes` depending on the format in which the secret was stored. Example: Read a secret value: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import read_secret @flow def example_read_secret(): aws_credentials = AwsCredentials( aws_access_key_id=\"access_key_id\", aws_secret_access_key=\"secret_access_key\" ) secret_value = read_secret( secret_name=\"db_password\", aws_credentials=aws_credentials ) example_read_secret() ``` \"\"\" logger = get_run_logger () logger . info ( \"Getting value for secret %s \" , secret_name ) client = aws_credentials . get_boto3_session () . client ( \"secretsmanager\" ) get_secret_value_kwargs = dict ( SecretId = secret_name ) if version_id is not None : get_secret_value_kwargs [ \"VersionId\" ] = version_id if version_stage is not None : get_secret_value_kwargs [ \"VersionStage\" ] = version_stage try : get_secret_value = partial ( client . get_secret_value , ** get_secret_value_kwargs ) response = await to_thread . run_sync ( get_secret_value ) except ClientError : logger . exception ( \"Unable to get value for secret %s \" , secret_name ) raise else : return response . get ( \"SecretString\" ) or response . get ( \"SecretBinary\" ) update_secret async Updates the value of a given secret in AWS Secrets Manager. Parameters: Name Type Description Default secret_name str Name of secret to update. required secret_value Union[str, bytes] Desired value of the secret. Can be either str or bytes . required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required description Optional[str] Desired description of the secret. None Returns: Type Description Dict[str, str] A dict containing the secret ARN (Amazon Resource Name), name, and current version ID. { \"ARN\" : str , \"Name\" : str , \"VersionId\" : str } Examples: Update a secret value: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import update_secret @flow def example_update_secret (): aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) update_secret ( secret_name = \"life_the_universe_and_everything\" , secret_value = \"42\" , aws_credentials = aws_credentials ) example_update_secret () Source code in prefect_aws/secrets_manager.py @task async def update_secret ( secret_name : str , secret_value : Union [ str , bytes ], aws_credentials : AwsCredentials , description : Optional [ str ] = None , ) -> Dict [ str , str ]: \"\"\" Updates the value of a given secret in AWS Secrets Manager. Args: secret_name: Name of secret to update. secret_value: Desired value of the secret. Can be either `str` or `bytes`. aws_credentials: Credentials to use for authentication with AWS. description: Desired description of the secret. Returns: Dict[str, str]: A dict containing the secret ARN (Amazon Resource Name), name, and current version ID. ```python { \"ARN\": str, \"Name\": str, \"VersionId\": str } ``` Example: Update a secret value: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import update_secret @flow def example_update_secret(): aws_credentials = AwsCredentials( aws_access_key_id=\"access_key_id\", aws_secret_access_key=\"secret_access_key\" ) update_secret( secret_name=\"life_the_universe_and_everything\", secret_value=\"42\", aws_credentials=aws_credentials ) example_update_secret() ``` \"\"\" update_secret_kwargs : Dict [ str , Union [ str , bytes ]] = dict ( SecretId = secret_name ) if description is not None : update_secret_kwargs [ \"Description\" ] = description if isinstance ( secret_value , bytes ): update_secret_kwargs [ \"SecretBinary\" ] = secret_value elif isinstance ( secret_value , str ): update_secret_kwargs [ \"SecretString\" ] = secret_value else : raise ValueError ( \"Please provide a bytes or str value for secret_value\" ) logger = get_run_logger () logger . info ( \"Updating value for secret %s \" , secret_name ) client = aws_credentials . get_boto3_session () . client ( \"secretsmanager\" ) try : update_secret = partial ( client . update_secret , ** update_secret_kwargs ) response = await to_thread . run_sync ( update_secret ) response . pop ( \"ResponseMetadata\" , None ) return response except ClientError : logger . exception ( \"Unable to update secret %s \" , secret_name ) raise","title":"Secrets Manager"},{"location":"secrets_manager/#prefect_aws.secrets_manager","text":"Tasks for interacting with AWS Secrets Manager","title":"secrets_manager"},{"location":"secrets_manager/#prefect_aws.secrets_manager.create_secret","text":"Creates a secret in AWS Secrets Manager. Parameters: Name Type Description Default secret_name str The name of the secret to create. required secret_value Union[str, bytes] The value to store in the created secret. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required description Optional[str] A description for the created secret. None tags Optional[List[Dict[str, str]]] A list of tags to attach to the secret. Each tag should be specified as a dictionary in the following format: { \"Key\" : str , \"Value\" : str } None Returns: Type Description Dict[str, str] A dict containing the secret ARN (Amazon Resource Name), name, and current version ID. { \"ARN\" : str , \"Name\" : str , \"VersionId\" : str } Examples: Create a secret: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import create_secret @flow def example_create_secret (): aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) create_secret ( secret_name = \"life_the_universe_and_everything\" , secret_value = \"42\" , aws_credentials = aws_credentials ) example_create_secret () Source code in prefect_aws/secrets_manager.py @task async def create_secret ( secret_name : str , secret_value : Union [ str , bytes ], aws_credentials : AwsCredentials , description : Optional [ str ] = None , tags : Optional [ List [ Dict [ str , str ]]] = None , ) -> Dict [ str , str ]: \"\"\" Creates a secret in AWS Secrets Manager. Args: secret_name: The name of the secret to create. secret_value: The value to store in the created secret. aws_credentials: Credentials to use for authentication with AWS. description: A description for the created secret. tags: A list of tags to attach to the secret. Each tag should be specified as a dictionary in the following format: ```python { \"Key\": str, \"Value\": str } ``` Returns: Dict[str, str]: A dict containing the secret ARN (Amazon Resource Name), name, and current version ID. ```python { \"ARN\": str, \"Name\": str, \"VersionId\": str } ``` Example: Create a secret: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import create_secret @flow def example_create_secret(): aws_credentials = AwsCredentials( aws_access_key_id=\"access_key_id\", aws_secret_access_key=\"secret_access_key\" ) create_secret( secret_name=\"life_the_universe_and_everything\", secret_value=\"42\", aws_credentials=aws_credentials ) example_create_secret() ``` \"\"\" create_secret_kwargs : Dict [ str , Union [ str , bytes , List [ Dict [ str , str ]]]] = dict ( Name = secret_name ) if description is not None : create_secret_kwargs [ \"Description\" ] = description if tags is not None : create_secret_kwargs [ \"Tags\" ] = tags if isinstance ( secret_value , bytes ): create_secret_kwargs [ \"SecretBinary\" ] = secret_value elif isinstance ( secret_value , str ): create_secret_kwargs [ \"SecretString\" ] = secret_value else : raise ValueError ( \"Please provide a bytes or str value for secret_value\" ) logger = get_run_logger () logger . info ( \"Creating secret named %s \" , secret_name ) client = aws_credentials . get_boto3_session () . client ( \"secretsmanager\" ) try : create_secret = partial ( client . create_secret , ** create_secret_kwargs ) response = await to_thread . run_sync ( create_secret ) print ( response . pop ( \"ResponseMetadata\" , None )) return response except ClientError : logger . exception ( \"Unable to create secret %s \" , secret_name ) raise","title":"create_secret()"},{"location":"secrets_manager/#prefect_aws.secrets_manager.delete_secret","text":"Deletes a secret from AWS Secrets Manager. Secrets can either be deleted immediately by setting force_delete_without_recovery equal to True . Otherwise, secrets will be marked for deletion and available for recovery for the number of days specified in recovery_window_in_days Parameters: Name Type Description Default secret_name str Name of the secret to be deleted. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required recovery_window_in_days int Number of days a secret should be recoverable for before permenant deletion. Minium window is 7 days and maximum window is 30 days. If force_delete_without_recovery is set to True , this value will be ignored. 30 force_delete_without_recovery bool If True , the secret will be immediately deleted and will not be recoverable. False Returns: Type Description Dict[str, str] A dict containing the secret ARN (Amazon Resource Name), name, and deletion date of the secret. DeletionDate is the date and time of the delete request plus the number of days in recovery_window_in_days . { \"ARN\" : str , \"Name\" : str , \"DeletionDate\" : datetime . datetime } Examples: Delete a secret immediately: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import delete_secret @flow def example_delete_secret_immediately (): aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) delete_secret ( secret_name = \"life_the_universe_and_everything\" , aws_credentials = aws_credentials , force_delete_without_recovery : True ) example_delete_secret_immediately () Delete a secret with a 90 day recovery window: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import delete_secret @flow def example_delete_secret_with_recovery_window (): aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) delete_secret ( secret_name = \"life_the_universe_and_everything\" , aws_credentials = aws_credentials , recovery_window_in_days = 90 ) example_delete_secret_with_recovery_window () Source code in prefect_aws/secrets_manager.py @task async def delete_secret ( secret_name : str , aws_credentials : AwsCredentials , recovery_window_in_days : int = 30 , force_delete_without_recovery : bool = False , ): \"\"\" Deletes a secret from AWS Secrets Manager. Secrets can either be deleted immediately by setting `force_delete_without_recovery` equal to `True`. Otherwise, secrets will be marked for deletion and available for recovery for the number of days specified in `recovery_window_in_days` Args: secret_name: Name of the secret to be deleted. aws_credentials: Credentials to use for authentication with AWS. recovery_window_in_days: Number of days a secret should be recoverable for before permenant deletion. Minium window is 7 days and maximum window is 30 days. If `force_delete_without_recovery` is set to `True`, this value will be ignored. force_delete_without_recovery: If `True`, the secret will be immediately deleted and will not be recoverable. Returns: Dict[str, str]: A dict containing the secret ARN (Amazon Resource Name), name, and deletion date of the secret. DeletionDate is the date and time of the delete request plus the number of days in `recovery_window_in_days`. ```python { \"ARN\": str, \"Name\": str, \"DeletionDate\": datetime.datetime } ``` Examples: Delete a secret immediately: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import delete_secret @flow def example_delete_secret_immediately(): aws_credentials = AwsCredentials( aws_access_key_id=\"access_key_id\", aws_secret_access_key=\"secret_access_key\" ) delete_secret( secret_name=\"life_the_universe_and_everything\", aws_credentials=aws_credentials, force_delete_without_recovery: True ) example_delete_secret_immediately() ``` Delete a secret with a 90 day recovery window: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import delete_secret @flow def example_delete_secret_with_recovery_window(): aws_credentials = AwsCredentials( aws_access_key_id=\"access_key_id\", aws_secret_access_key=\"secret_access_key\" ) delete_secret( secret_name=\"life_the_universe_and_everything\", aws_credentials=aws_credentials, recovery_window_in_days=90 ) example_delete_secret_with_recovery_window() ``` \"\"\" if not force_delete_without_recovery and not ( 7 <= recovery_window_in_days <= 30 ): raise ValueError ( \"Recovery window must be between 7 and 30 days.\" ) delete_secret_kwargs : Dict [ str , Union [ str , int , bool ]] = dict ( SecretId = secret_name ) if force_delete_without_recovery : delete_secret_kwargs [ \"ForceDeleteWithoutRecovery\" ] = force_delete_without_recovery else : delete_secret_kwargs [ \"RecoveryWindowInDays\" ] = recovery_window_in_days logger = get_run_logger () logger . info ( \"Deleting secret %s \" , secret_name ) client = aws_credentials . get_boto3_session () . client ( \"secretsmanager\" ) try : delete_secret = partial ( client . delete_secret , ** delete_secret_kwargs ) response = await to_thread . run_sync ( delete_secret ) response . pop ( \"ResponseMetadata\" , None ) return response except ClientError : logger . exception ( \"Unable to delete secret %s \" , secret_name ) raise","title":"delete_secret()"},{"location":"secrets_manager/#prefect_aws.secrets_manager.read_secret","text":"Reads the value of a given secret from AWS Secrets Manager. Parameters: Name Type Description Default secret_name str Name of stored secret. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required version_id Optional[str] Specifies version of secret to read. Defaults to the most recent version if not given. None version_stage Optional[str] Specifies the version stage of the secret to read. Defaults to AWS_CURRENT if not given. None Returns: Type Description Union[str, bytes] The secret values as a str or bytes depending on the format in which the secret was stored. Examples: Read a secret value: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import read_secret @flow def example_read_secret (): aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) secret_value = read_secret ( secret_name = \"db_password\" , aws_credentials = aws_credentials ) example_read_secret () Source code in prefect_aws/secrets_manager.py @task async def read_secret ( secret_name : str , aws_credentials : AwsCredentials , version_id : Optional [ str ] = None , version_stage : Optional [ str ] = None , ) -> Union [ str , bytes ]: \"\"\" Reads the value of a given secret from AWS Secrets Manager. Args: secret_name: Name of stored secret. aws_credentials: Credentials to use for authentication with AWS. version_id: Specifies version of secret to read. Defaults to the most recent version if not given. version_stage: Specifies the version stage of the secret to read. Defaults to AWS_CURRENT if not given. Returns: The secret values as a `str` or `bytes` depending on the format in which the secret was stored. Example: Read a secret value: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import read_secret @flow def example_read_secret(): aws_credentials = AwsCredentials( aws_access_key_id=\"access_key_id\", aws_secret_access_key=\"secret_access_key\" ) secret_value = read_secret( secret_name=\"db_password\", aws_credentials=aws_credentials ) example_read_secret() ``` \"\"\" logger = get_run_logger () logger . info ( \"Getting value for secret %s \" , secret_name ) client = aws_credentials . get_boto3_session () . client ( \"secretsmanager\" ) get_secret_value_kwargs = dict ( SecretId = secret_name ) if version_id is not None : get_secret_value_kwargs [ \"VersionId\" ] = version_id if version_stage is not None : get_secret_value_kwargs [ \"VersionStage\" ] = version_stage try : get_secret_value = partial ( client . get_secret_value , ** get_secret_value_kwargs ) response = await to_thread . run_sync ( get_secret_value ) except ClientError : logger . exception ( \"Unable to get value for secret %s \" , secret_name ) raise else : return response . get ( \"SecretString\" ) or response . get ( \"SecretBinary\" )","title":"read_secret()"},{"location":"secrets_manager/#prefect_aws.secrets_manager.update_secret","text":"Updates the value of a given secret in AWS Secrets Manager. Parameters: Name Type Description Default secret_name str Name of secret to update. required secret_value Union[str, bytes] Desired value of the secret. Can be either str or bytes . required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required description Optional[str] Desired description of the secret. None Returns: Type Description Dict[str, str] A dict containing the secret ARN (Amazon Resource Name), name, and current version ID. { \"ARN\" : str , \"Name\" : str , \"VersionId\" : str } Examples: Update a secret value: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import update_secret @flow def example_update_secret (): aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) update_secret ( secret_name = \"life_the_universe_and_everything\" , secret_value = \"42\" , aws_credentials = aws_credentials ) example_update_secret () Source code in prefect_aws/secrets_manager.py @task async def update_secret ( secret_name : str , secret_value : Union [ str , bytes ], aws_credentials : AwsCredentials , description : Optional [ str ] = None , ) -> Dict [ str , str ]: \"\"\" Updates the value of a given secret in AWS Secrets Manager. Args: secret_name: Name of secret to update. secret_value: Desired value of the secret. Can be either `str` or `bytes`. aws_credentials: Credentials to use for authentication with AWS. description: Desired description of the secret. Returns: Dict[str, str]: A dict containing the secret ARN (Amazon Resource Name), name, and current version ID. ```python { \"ARN\": str, \"Name\": str, \"VersionId\": str } ``` Example: Update a secret value: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import update_secret @flow def example_update_secret(): aws_credentials = AwsCredentials( aws_access_key_id=\"access_key_id\", aws_secret_access_key=\"secret_access_key\" ) update_secret( secret_name=\"life_the_universe_and_everything\", secret_value=\"42\", aws_credentials=aws_credentials ) example_update_secret() ``` \"\"\" update_secret_kwargs : Dict [ str , Union [ str , bytes ]] = dict ( SecretId = secret_name ) if description is not None : update_secret_kwargs [ \"Description\" ] = description if isinstance ( secret_value , bytes ): update_secret_kwargs [ \"SecretBinary\" ] = secret_value elif isinstance ( secret_value , str ): update_secret_kwargs [ \"SecretString\" ] = secret_value else : raise ValueError ( \"Please provide a bytes or str value for secret_value\" ) logger = get_run_logger () logger . info ( \"Updating value for secret %s \" , secret_name ) client = aws_credentials . get_boto3_session () . client ( \"secretsmanager\" ) try : update_secret = partial ( client . update_secret , ** update_secret_kwargs ) response = await to_thread . run_sync ( update_secret ) response . pop ( \"ResponseMetadata\" , None ) return response except ClientError : logger . exception ( \"Unable to update secret %s \" , secret_name ) raise","title":"update_secret()"}]}