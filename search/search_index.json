{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-aws Welcome! prefect-aws is a collection of pre-built Prefect tasks that can be used to quickly construct Prefect flows that interact with Amazon Web Services. Getting Started Python setup Requires an installation of Python 3.7+ We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-aws pip install prefect-aws AWS Authentication You will need to obtain AWS credentials in order to use these tasks. Refer to the AWS documentation for authentication methods available. Write and run a flow with prefect-aws tasks from prefect import flow from prefect_aws.s3 import s3_upload @flow def example_s3_upload_flow (): aws_credentials = AwsCredentials ( aws_access_key_id = \"acccess_key_id\" , aws_secret_access_key = \"secret_access_key\" ) with open ( \"data.csv\" , \"rb\" ) as file : key = s3_upload ( bucket = \"bucket\" , key = \"data.csv\" , data = file . read (), aws_credentials = aws_credentials , ) example_s3_upload_flow () Write and run a flow with AwsCredentials and S3Bucket import asyncio from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import S3Bucket @flow async def aws_s3_bucket_roundtrip (): # create an AwsCredentials block here or through UI aws_creds = AwsCredentials ( aws_access_key_id = \"AWS_ACCESS_KEY_ID\" , aws_secret_access_key = \"AWS_SECRET_ACCESS_KEY\" ) s3_bucket = S3Bucket ( bucket_name = \"bucket\" , # must exist aws_credentials = aws_creds , basepath = \"subfolder\" , ) key = await s3_bucket . write_path ( \"data.csv\" , content = b \"hello\" ) return await s3_bucket . read_path ( key ) asyncio . run ( aws_s3_bucket_roundtrip ()) Write and run an async flow by loading a MinIOCredentials block to use in S3Bucket import asyncio from prefect import flow from prefect_aws import MinIOCredentials from prefect_aws.s3 import S3Bucket @flow async def minio_s3_bucket_roundtrip (): minio_creds = MinIOCredentials . load ( \"MY_BLOCK_NAME\" ) s3_bucket = S3Bucket ( bucket_name = \"bucket\" , # must exist minio_credentials = minio_creds , endpoint_url = \"http://localhost:9000\" ) path_to_file = await s3_bucket . write_path ( \"/data.csv\" , content = b \"hello\" ) return await s3_bucket . read_path ( path_to_file ) asyncio . run ( minio_s3_bucket_roundtrip ()) Next steps Refer to the API documentation in the side menu to explore all the capabilities of Prefect AWS! Resources If you encounter and bugs while using prefect-aws , feel free to open an issue in the prefect-aws repository. If you have any questions or issues while using prefect-aws , you can find help in either the Prefect Discourse forum or the Prefect Slack community Development If you'd like to install a version of prefect-aws for development, first clone the repository and then perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-aws.git cd prefect-aws/ pip install -e \".[dev]\"","title":"Home"},{"location":"#prefect-aws","text":"","title":"prefect-aws"},{"location":"#welcome","text":"prefect-aws is a collection of pre-built Prefect tasks that can be used to quickly construct Prefect flows that interact with Amazon Web Services.","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+ We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-aws pip install prefect-aws","title":"Installation"},{"location":"#aws-authentication","text":"You will need to obtain AWS credentials in order to use these tasks. Refer to the AWS documentation for authentication methods available.","title":"AWS Authentication"},{"location":"#write-and-run-a-flow-with-prefect-aws-tasks","text":"from prefect import flow from prefect_aws.s3 import s3_upload @flow def example_s3_upload_flow (): aws_credentials = AwsCredentials ( aws_access_key_id = \"acccess_key_id\" , aws_secret_access_key = \"secret_access_key\" ) with open ( \"data.csv\" , \"rb\" ) as file : key = s3_upload ( bucket = \"bucket\" , key = \"data.csv\" , data = file . read (), aws_credentials = aws_credentials , ) example_s3_upload_flow ()","title":"Write and run a flow with prefect-aws tasks"},{"location":"#write-and-run-a-flow-with-awscredentials-and-s3bucket","text":"import asyncio from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import S3Bucket @flow async def aws_s3_bucket_roundtrip (): # create an AwsCredentials block here or through UI aws_creds = AwsCredentials ( aws_access_key_id = \"AWS_ACCESS_KEY_ID\" , aws_secret_access_key = \"AWS_SECRET_ACCESS_KEY\" ) s3_bucket = S3Bucket ( bucket_name = \"bucket\" , # must exist aws_credentials = aws_creds , basepath = \"subfolder\" , ) key = await s3_bucket . write_path ( \"data.csv\" , content = b \"hello\" ) return await s3_bucket . read_path ( key ) asyncio . run ( aws_s3_bucket_roundtrip ())","title":"Write and run a flow with AwsCredentials and S3Bucket"},{"location":"#write-and-run-an-async-flow-by-loading-a-miniocredentials-block-to-use-in-s3bucket","text":"import asyncio from prefect import flow from prefect_aws import MinIOCredentials from prefect_aws.s3 import S3Bucket @flow async def minio_s3_bucket_roundtrip (): minio_creds = MinIOCredentials . load ( \"MY_BLOCK_NAME\" ) s3_bucket = S3Bucket ( bucket_name = \"bucket\" , # must exist minio_credentials = minio_creds , endpoint_url = \"http://localhost:9000\" ) path_to_file = await s3_bucket . write_path ( \"/data.csv\" , content = b \"hello\" ) return await s3_bucket . read_path ( path_to_file ) asyncio . run ( minio_s3_bucket_roundtrip ())","title":"Write and run an async flow by loading a MinIOCredentials block to use in S3Bucket"},{"location":"#next-steps","text":"Refer to the API documentation in the side menu to explore all the capabilities of Prefect AWS!","title":"Next steps"},{"location":"#resources","text":"If you encounter and bugs while using prefect-aws , feel free to open an issue in the prefect-aws repository. If you have any questions or issues while using prefect-aws , you can find help in either the Prefect Discourse forum or the Prefect Slack community","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-aws for development, first clone the repository and then perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-aws.git cd prefect-aws/ pip install -e \".[dev]\"","title":"Development"},{"location":"batch/","text":"prefect_aws.batch Tasks for interacting with AWS Batch batch_submit async Submit a job to the AWS Batch job service. Parameters: Name Type Description Default job_name str The AWS batch job name. required job_definition str The AWS batch job definition. required job_queue str Name of the AWS batch job queue. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required batch_kwargs Additional keyword arguments to pass to the boto3 submit_job function. See the documentation for submit_job for more details. required Returns: Type Description The id corresponding to the job. Example Submits a job to batch. from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.batch import batch_submit @flow def example_batch_submit_flow (): aws_credentials = AwsCredentials ( aws_access_key_id = \"acccess_key_id\" , aws_secret_access_key = \"secret_access_key\" ) job_id = batch_submit ( \"job_name\" , \"job_definition\" , \"job_queue\" , aws_credentials ) return job_id example_batch_submit_flow () Source code in prefect_aws/batch.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 @task async def batch_submit ( job_name : str , job_queue : str , job_definition : str , aws_credentials : AwsCredentials , ** batch_kwargs : Optional [ Dict [ str , Any ]], ): \"\"\" Submit a job to the AWS Batch job service. Args: job_name: The AWS batch job name. job_definition: The AWS batch job definition. job_queue: Name of the AWS batch job queue. aws_credentials: Credentials to use for authentication with AWS. batch_kwargs: Additional keyword arguments to pass to the boto3 `submit_job` function. See the documentation for [submit_job](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/batch.html#Batch.Client.submit_job) for more details. Returns: The id corresponding to the job. Example: Submits a job to batch. ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.batch import batch_submit @flow def example_batch_submit_flow(): aws_credentials = AwsCredentials( aws_access_key_id=\"acccess_key_id\", aws_secret_access_key=\"secret_access_key\" ) job_id = batch_submit( \"job_name\", \"job_definition\", \"job_queue\", aws_credentials ) return job_id example_batch_submit_flow() ``` \"\"\" # noqa logger = get_run_logger () logger . info ( \"Preparing to submit %s job to %s job queue\" , job_name , job_queue ) batch_kwargs = batch_kwargs or {} batch_client = aws_credentials . get_boto3_session () . client ( \"batch\" ) response = await run_sync_in_worker_thread ( batch_client . submit_job , jobName = job_name , jobQueue = job_queue , jobDefinition = job_definition , ** batch_kwargs , ) return response [ \"jobId\" ]","title":"Batch"},{"location":"batch/#prefect_aws.batch","text":"Tasks for interacting with AWS Batch","title":"batch"},{"location":"batch/#prefect_aws.batch.batch_submit","text":"Submit a job to the AWS Batch job service. Parameters: Name Type Description Default job_name str The AWS batch job name. required job_definition str The AWS batch job definition. required job_queue str Name of the AWS batch job queue. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required batch_kwargs Additional keyword arguments to pass to the boto3 submit_job function. See the documentation for submit_job for more details. required Returns: Type Description The id corresponding to the job. Example Submits a job to batch. from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.batch import batch_submit @flow def example_batch_submit_flow (): aws_credentials = AwsCredentials ( aws_access_key_id = \"acccess_key_id\" , aws_secret_access_key = \"secret_access_key\" ) job_id = batch_submit ( \"job_name\" , \"job_definition\" , \"job_queue\" , aws_credentials ) return job_id example_batch_submit_flow () Source code in prefect_aws/batch.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 @task async def batch_submit ( job_name : str , job_queue : str , job_definition : str , aws_credentials : AwsCredentials , ** batch_kwargs : Optional [ Dict [ str , Any ]], ): \"\"\" Submit a job to the AWS Batch job service. Args: job_name: The AWS batch job name. job_definition: The AWS batch job definition. job_queue: Name of the AWS batch job queue. aws_credentials: Credentials to use for authentication with AWS. batch_kwargs: Additional keyword arguments to pass to the boto3 `submit_job` function. See the documentation for [submit_job](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/batch.html#Batch.Client.submit_job) for more details. Returns: The id corresponding to the job. Example: Submits a job to batch. ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.batch import batch_submit @flow def example_batch_submit_flow(): aws_credentials = AwsCredentials( aws_access_key_id=\"acccess_key_id\", aws_secret_access_key=\"secret_access_key\" ) job_id = batch_submit( \"job_name\", \"job_definition\", \"job_queue\", aws_credentials ) return job_id example_batch_submit_flow() ``` \"\"\" # noqa logger = get_run_logger () logger . info ( \"Preparing to submit %s job to %s job queue\" , job_name , job_queue ) batch_kwargs = batch_kwargs or {} batch_client = aws_credentials . get_boto3_session () . client ( \"batch\" ) response = await run_sync_in_worker_thread ( batch_client . submit_job , jobName = job_name , jobQueue = job_queue , jobDefinition = job_definition , ** batch_kwargs , ) return response [ \"jobId\" ]","title":"batch_submit()"},{"location":"credentials/","text":"prefect_aws.credentials Module handling AWS credentials AwsCredentials Block used to manage authentication with AWS. AWS authentication is handled via the boto3 module. Refer to the boto3 docs for more info about the possible credential configurations. Parameters: Name Type Description Default aws_access_key_id A specific AWS access key ID. required aws_secret_access_key A specific AWS secret access key. required aws_session_token The session key for your AWS account. This is only needed when you are using temporary credentials. required profile_name The profile to use when creating your session. required region_name The AWS Region where you want to create new connections. required Example Load stored AWS credentials: from prefect_aws import AwsCredentials aws_credentials_block = AwsCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_aws/credentials.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 class AwsCredentials ( Block ): \"\"\" Block used to manage authentication with AWS. AWS authentication is handled via the `boto3` module. Refer to the [boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for more info about the possible credential configurations. Args: aws_access_key_id: A specific AWS access key ID. aws_secret_access_key: A specific AWS secret access key. aws_session_token: The session key for your AWS account. This is only needed when you are using temporary credentials. profile_name: The profile to use when creating your session. region_name: The AWS Region where you want to create new connections. Example: Load stored AWS credentials: ```python from prefect_aws import AwsCredentials aws_credentials_block = AwsCredentials.load(\"BLOCK_NAME\") ``` \"\"\" # noqa E501 _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/1jbV4lceHOjGgunX15lUwT/db88e184d727f721575aeb054a37e277/aws.png?h=250\" # noqa _block_type_name = \"AWS Credentials\" aws_access_key_id : Optional [ str ] = None aws_secret_access_key : Optional [ SecretStr ] = None aws_session_token : Optional [ str ] = None profile_name : Optional [ str ] = None region_name : Optional [ str ] = None def get_boto3_session ( self ) -> boto3 . Session : \"\"\" Returns an authenticated boto3 session that can be used to create clients for AWS services Example: Create an S3 client from an authorized boto3 session: ```python aws_credentials = AwsCredentials( aws_access_key_id = \"access_key_id\", aws_secret_access_key = \"secret_access_key\" ) s3_client = aws_credentials.get_boto3_session().client(\"s3\") ``` \"\"\" if self . aws_secret_access_key : aws_secret_access_key = self . aws_secret_access_key . get_secret_value () else : aws_secret_access_key = None return boto3 . Session ( aws_access_key_id = self . aws_access_key_id , aws_secret_access_key = aws_secret_access_key , aws_session_token = self . aws_session_token , profile_name = self . profile_name , region_name = self . region_name , ) get_boto3_session Returns an authenticated boto3 session that can be used to create clients for AWS services Example Create an S3 client from an authorized boto3 session: aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) s3_client = aws_credentials . get_boto3_session () . client ( \"s3\" ) Source code in prefect_aws/credentials.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def get_boto3_session ( self ) -> boto3 . Session : \"\"\" Returns an authenticated boto3 session that can be used to create clients for AWS services Example: Create an S3 client from an authorized boto3 session: ```python aws_credentials = AwsCredentials( aws_access_key_id = \"access_key_id\", aws_secret_access_key = \"secret_access_key\" ) s3_client = aws_credentials.get_boto3_session().client(\"s3\") ``` \"\"\" if self . aws_secret_access_key : aws_secret_access_key = self . aws_secret_access_key . get_secret_value () else : aws_secret_access_key = None return boto3 . Session ( aws_access_key_id = self . aws_access_key_id , aws_secret_access_key = aws_secret_access_key , aws_session_token = self . aws_session_token , profile_name = self . profile_name , region_name = self . region_name , ) MinIOCredentials Block used to manage authentication with MinIO. Refer to the MinIO docs for more info about the possible credential configurations. Parameters: Name Type Description Default minio_root_user Admin or root user. required minio_root_password Admin or root password. required region_name Location of server, e.g. \"us-east-1\". required Example Load stored MinIO credentials: from prefect_aws import MinIOCredentials minio_credentials_block = MinIOCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_aws/credentials.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 class MinIOCredentials ( Block ): \"\"\" Block used to manage authentication with MinIO. Refer to the [MinIO docs](https://docs.min.io/docs/minio-server-configuration-guide.html) for more info about the possible credential configurations. Args: minio_root_user: Admin or root user. minio_root_password: Admin or root password. region_name: Location of server, e.g. \"us-east-1\". Example: Load stored MinIO credentials: ```python from prefect_aws import MinIOCredentials minio_credentials_block = MinIOCredentials.load(\"BLOCK_NAME\") ``` \"\"\" # noqa E501 _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/22vXcxsOrVeFrUwHfSoaeT/7607b876eb589a9028c8126e78f4c7b4/imageedit_7_2837870043.png?h=250\" # noqa _block_type_name = \"MinIO Credentials\" _description = ( \"Block used to manage authentication with MinIO. Refer to the MinIO \" \"docs: https://docs.min.io/docs/minio-server-configuration-guide.html \" \"for more info about the possible credential configurations.\" ) minio_root_user : str minio_root_password : SecretStr region_name : Optional [ str ] = None def get_boto3_session ( self ) -> boto3 . Session : \"\"\" Returns an authenticated boto3 session that can be used to create clients and perform object operations on MinIO server. Example: Create an S3 client from an authorized boto3 session ```python minio_credentials = MinIOCredentials( minio_root_user = \"minio_root_user\", minio_root_password = \"minio_root_password\" ) s3_client = minio_credentials.get_boto3_session().client( service=\"s3\", endpoint_url=\"http://localhost:9000\" ) ``` \"\"\" minio_root_password = ( self . minio_root_password . get_secret_value () if self . minio_root_password else None ) return boto3 . Session ( aws_access_key_id = self . minio_root_user , aws_secret_access_key = minio_root_password , region_name = self . region_name , ) get_boto3_session Returns an authenticated boto3 session that can be used to create clients and perform object operations on MinIO server. Example Create an S3 client from an authorized boto3 session minio_credentials = MinIOCredentials ( minio_root_user = \"minio_root_user\" , minio_root_password = \"minio_root_password\" ) s3_client = minio_credentials . get_boto3_session () . client ( service = \"s3\" , endpoint_url = \"http://localhost:9000\" ) Source code in prefect_aws/credentials.py 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 def get_boto3_session ( self ) -> boto3 . Session : \"\"\" Returns an authenticated boto3 session that can be used to create clients and perform object operations on MinIO server. Example: Create an S3 client from an authorized boto3 session ```python minio_credentials = MinIOCredentials( minio_root_user = \"minio_root_user\", minio_root_password = \"minio_root_password\" ) s3_client = minio_credentials.get_boto3_session().client( service=\"s3\", endpoint_url=\"http://localhost:9000\" ) ``` \"\"\" minio_root_password = ( self . minio_root_password . get_secret_value () if self . minio_root_password else None ) return boto3 . Session ( aws_access_key_id = self . minio_root_user , aws_secret_access_key = minio_root_password , region_name = self . region_name , )","title":"Credentials"},{"location":"credentials/#prefect_aws.credentials","text":"Module handling AWS credentials","title":"credentials"},{"location":"credentials/#prefect_aws.credentials.AwsCredentials","text":"Block used to manage authentication with AWS. AWS authentication is handled via the boto3 module. Refer to the boto3 docs for more info about the possible credential configurations. Parameters: Name Type Description Default aws_access_key_id A specific AWS access key ID. required aws_secret_access_key A specific AWS secret access key. required aws_session_token The session key for your AWS account. This is only needed when you are using temporary credentials. required profile_name The profile to use when creating your session. required region_name The AWS Region where you want to create new connections. required Example Load stored AWS credentials: from prefect_aws import AwsCredentials aws_credentials_block = AwsCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_aws/credentials.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 class AwsCredentials ( Block ): \"\"\" Block used to manage authentication with AWS. AWS authentication is handled via the `boto3` module. Refer to the [boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for more info about the possible credential configurations. Args: aws_access_key_id: A specific AWS access key ID. aws_secret_access_key: A specific AWS secret access key. aws_session_token: The session key for your AWS account. This is only needed when you are using temporary credentials. profile_name: The profile to use when creating your session. region_name: The AWS Region where you want to create new connections. Example: Load stored AWS credentials: ```python from prefect_aws import AwsCredentials aws_credentials_block = AwsCredentials.load(\"BLOCK_NAME\") ``` \"\"\" # noqa E501 _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/1jbV4lceHOjGgunX15lUwT/db88e184d727f721575aeb054a37e277/aws.png?h=250\" # noqa _block_type_name = \"AWS Credentials\" aws_access_key_id : Optional [ str ] = None aws_secret_access_key : Optional [ SecretStr ] = None aws_session_token : Optional [ str ] = None profile_name : Optional [ str ] = None region_name : Optional [ str ] = None def get_boto3_session ( self ) -> boto3 . Session : \"\"\" Returns an authenticated boto3 session that can be used to create clients for AWS services Example: Create an S3 client from an authorized boto3 session: ```python aws_credentials = AwsCredentials( aws_access_key_id = \"access_key_id\", aws_secret_access_key = \"secret_access_key\" ) s3_client = aws_credentials.get_boto3_session().client(\"s3\") ``` \"\"\" if self . aws_secret_access_key : aws_secret_access_key = self . aws_secret_access_key . get_secret_value () else : aws_secret_access_key = None return boto3 . Session ( aws_access_key_id = self . aws_access_key_id , aws_secret_access_key = aws_secret_access_key , aws_session_token = self . aws_session_token , profile_name = self . profile_name , region_name = self . region_name , )","title":"AwsCredentials"},{"location":"credentials/#prefect_aws.credentials.AwsCredentials.get_boto3_session","text":"Returns an authenticated boto3 session that can be used to create clients for AWS services Example Create an S3 client from an authorized boto3 session: aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) s3_client = aws_credentials . get_boto3_session () . client ( \"s3\" ) Source code in prefect_aws/credentials.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def get_boto3_session ( self ) -> boto3 . Session : \"\"\" Returns an authenticated boto3 session that can be used to create clients for AWS services Example: Create an S3 client from an authorized boto3 session: ```python aws_credentials = AwsCredentials( aws_access_key_id = \"access_key_id\", aws_secret_access_key = \"secret_access_key\" ) s3_client = aws_credentials.get_boto3_session().client(\"s3\") ``` \"\"\" if self . aws_secret_access_key : aws_secret_access_key = self . aws_secret_access_key . get_secret_value () else : aws_secret_access_key = None return boto3 . Session ( aws_access_key_id = self . aws_access_key_id , aws_secret_access_key = aws_secret_access_key , aws_session_token = self . aws_session_token , profile_name = self . profile_name , region_name = self . region_name , )","title":"get_boto3_session()"},{"location":"credentials/#prefect_aws.credentials.MinIOCredentials","text":"Block used to manage authentication with MinIO. Refer to the MinIO docs for more info about the possible credential configurations. Parameters: Name Type Description Default minio_root_user Admin or root user. required minio_root_password Admin or root password. required region_name Location of server, e.g. \"us-east-1\". required Example Load stored MinIO credentials: from prefect_aws import MinIOCredentials minio_credentials_block = MinIOCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_aws/credentials.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 class MinIOCredentials ( Block ): \"\"\" Block used to manage authentication with MinIO. Refer to the [MinIO docs](https://docs.min.io/docs/minio-server-configuration-guide.html) for more info about the possible credential configurations. Args: minio_root_user: Admin or root user. minio_root_password: Admin or root password. region_name: Location of server, e.g. \"us-east-1\". Example: Load stored MinIO credentials: ```python from prefect_aws import MinIOCredentials minio_credentials_block = MinIOCredentials.load(\"BLOCK_NAME\") ``` \"\"\" # noqa E501 _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/22vXcxsOrVeFrUwHfSoaeT/7607b876eb589a9028c8126e78f4c7b4/imageedit_7_2837870043.png?h=250\" # noqa _block_type_name = \"MinIO Credentials\" _description = ( \"Block used to manage authentication with MinIO. Refer to the MinIO \" \"docs: https://docs.min.io/docs/minio-server-configuration-guide.html \" \"for more info about the possible credential configurations.\" ) minio_root_user : str minio_root_password : SecretStr region_name : Optional [ str ] = None def get_boto3_session ( self ) -> boto3 . Session : \"\"\" Returns an authenticated boto3 session that can be used to create clients and perform object operations on MinIO server. Example: Create an S3 client from an authorized boto3 session ```python minio_credentials = MinIOCredentials( minio_root_user = \"minio_root_user\", minio_root_password = \"minio_root_password\" ) s3_client = minio_credentials.get_boto3_session().client( service=\"s3\", endpoint_url=\"http://localhost:9000\" ) ``` \"\"\" minio_root_password = ( self . minio_root_password . get_secret_value () if self . minio_root_password else None ) return boto3 . Session ( aws_access_key_id = self . minio_root_user , aws_secret_access_key = minio_root_password , region_name = self . region_name , )","title":"MinIOCredentials"},{"location":"credentials/#prefect_aws.credentials.MinIOCredentials.get_boto3_session","text":"Returns an authenticated boto3 session that can be used to create clients and perform object operations on MinIO server. Example Create an S3 client from an authorized boto3 session minio_credentials = MinIOCredentials ( minio_root_user = \"minio_root_user\" , minio_root_password = \"minio_root_password\" ) s3_client = minio_credentials . get_boto3_session () . client ( service = \"s3\" , endpoint_url = \"http://localhost:9000\" ) Source code in prefect_aws/credentials.py 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 def get_boto3_session ( self ) -> boto3 . Session : \"\"\" Returns an authenticated boto3 session that can be used to create clients and perform object operations on MinIO server. Example: Create an S3 client from an authorized boto3 session ```python minio_credentials = MinIOCredentials( minio_root_user = \"minio_root_user\", minio_root_password = \"minio_root_password\" ) s3_client = minio_credentials.get_boto3_session().client( service=\"s3\", endpoint_url=\"http://localhost:9000\" ) ``` \"\"\" minio_root_password = ( self . minio_root_password . get_secret_value () if self . minio_root_password else None ) return boto3 . Session ( aws_access_key_id = self . minio_root_user , aws_secret_access_key = minio_root_password , region_name = self . region_name , )","title":"get_boto3_session()"},{"location":"s3/","text":"prefect_aws.s3 Tasks for interacting with AWS S3 S3Bucket Block used to store data using AWS S3 or S3-compatible object storage like MinIO. Parameters: Name Type Description Default bucket_name Name of your bucket. required aws_credentials A block containing your credentials (choose this or minio_credentials). required minio_credentials A block containing your credentials (choose this or aws_credentials). required basepath Used when you don't want to read/write at base level. required endpoint_url Used for non-AWS configuration. When unspecified, defaults to AWS. required Example Load stored S3Bucket configuration: from prefect_aws.s3 import S3Bucket s3bucket_block = S3Bucket . load ( \"BLOCK_NAME\" ) Source code in prefect_aws/s3.pyclass S3Bucket ( ReadableFileSystem , WritableFileSystem ): \"\"\" Block used to store data using AWS S3 or S3-compatible object storage like MinIO. Args: bucket_name: Name of your bucket. aws_credentials: A block containing your credentials (choose this or minio_credentials). minio_credentials: A block containing your credentials (choose this or aws_credentials). basepath: Used when you don't want to read/write at base level. endpoint_url: Used for non-AWS configuration. When unspecified, defaults to AWS. Example: Load stored S3Bucket configuration: ```python from prefect_aws.s3 import S3Bucket s3bucket_block = S3Bucket.load(\"BLOCK_NAME\") ``` \"\"\" # change _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/uPezmBzEv4moXKdQJ3YyL/a1f029b423cf67f474d1eee33c1463d7/pngwing.com.png?h=250\" # noqa _block_type_name = \"S3 Bucket\" bucket_name : str minio_credentials : Optional [ MinIOCredentials ] aws_credentials : Optional [ AwsCredentials ] basepath : Optional [ Path ] endpoint_url : Optional [ str ] @validator ( \"basepath\" , pre = True ) def cast_pathlib ( cls , value ): \"\"\" If basepath provided, it means we aren't writing to the root directory of the bucket. We need to ensure that it is a valid path. This is called when the S3Bucket block is instantiated. \"\"\" if isinstance ( value , Path ): return str ( value ) return value @root_validator ( pre = True ) def check_credentials ( cls , values ): \"\"\" Ensure exactly 1 of 2 optional credentials fields has been provided by user. \"\"\" minio_creds_exist = bool ( values . get ( \"minio_credentials\" )) aws_creds_exist = bool ( values . get ( \"aws_credentials\" )) # if both credentials fields provided if minio_creds_exist and aws_creds_exist : raise ValueError ( \"S3Bucket accepts a minio_credentials field or an\" \"aws_credentials field but not both.\" ) # if neither credentials fields provided if not minio_creds_exist and not aws_creds_exist : raise ValueError ( \"S3Bucket requires either a minio_credentials\" \"field or an aws_credentials field.\" ) return values def _resolve_path ( self , path : str ) -> Path : \"\"\" A helper function used in write_path to join `self.basepath` and `path`. Args: path: Name of the key, e.g. \"file1\". Each object in your bucket has a unique key (or key name). \"\"\" path = path or str ( uuid4 ()) # If basepath provided, it means we won't write to the root dir of # the bucket. So we need to add it on the front of the path. path = str ( Path ( self . basepath ) / path ) if self . basepath else path return path def _get_s3_client ( self ) -> boto3 . client : \"\"\" Authenticate MinIO credentials or AWS credentials and return an S3 client. This is a helper function called by read_path() or write_path(). \"\"\" if self . minio_credentials : s3_client = self . minio_credentials . get_boto3_session () . client ( service_name = \"s3\" , endpoint_url = self . endpoint_url ) elif self . aws_credentials : s3_client = self . aws_credentials . get_boto3_session () . client ( service_name = \"s3\" ) return s3_client async def read_path ( self , path : str ) -> bytes : \"\"\" Read specified path from S3 and return contents. Provide the entire path to the key in S3. Args: path: Entire path to (and including) the key. Example: Read \"subfolder/file1\" contents from an S3 bucket named \"bucket\": ```python from prefect_aws import AwsCredentials from prefect_aws.s3 import S3Bucket aws_creds = AwsCredentials( aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY ) s3_bucket_block = S3Bucket( bucket_name=\"bucket\", aws_credentials=aws_creds, basepath=\"subfolder\" ) key_contents = s3_bucket_block.read_path(path=\"subfolder/file1\") ``` \"\"\" return await run_sync_in_worker_thread ( self . _read_sync , path ) def _read_sync ( self , key : str ) -> bytes : \"\"\" Called by read_path(). Creates an S3 client and retrieves the contents from a specified path. \"\"\" s3_client = self . _get_s3_client () with io . BytesIO () as stream : s3_client . download_fileobj ( Bucket = self . bucket_name , Key = key , Fileobj = stream ) stream . seek ( 0 ) output = stream . read () return output async def write_path ( self , path : str , content : bytes ) -> str : \"\"\" Writes to an S3 bucket. Args: path: The key name. Each object in your bucket has a unique key (or key name). content: What you are uploading to S3. Example: Write data to the path `dogs/small_dogs/havanese` in an S3 Bucket: ```python from prefect_aws import MinioCredentials from prefect_aws.s3 import S3Bucket minio_creds = MinIOCredentials( minio_root_user = \"minioadmin\", minio_root_password = \"minioadmin\", ) s3_bucket_block = S3Bucket( bucket_name=\"bucket\", minio_credentials=minio_creds, basepath=\"dogs/smalldogs\", endpoint_url=\"http://localhost:9000\", ) s3_havanese_path = s3_bucket_block.write_path(path=\"havanese\", content=data) ``` \"\"\" path = self . _resolve_path ( path ) await run_sync_in_worker_thread ( self . _write_sync , path , content ) return path def _write_sync ( self , key : str , data : bytes ) -> None : \"\"\" Called by write_path(). Creates an S3 client and uploads a file object. \"\"\" s3_client = self . _get_s3_client () with io . BytesIO ( data ) as stream : s3_client . upload_fileobj ( Fileobj = stream , Bucket = self . bucket_name , Key = key ) cast_pathlib If basepath provided, it means we aren't writing to the root directory of the bucket. We need to ensure that it is a valid path. This is called when the S3Bucket block is instantiated. Source code in prefect_aws/s3.py 266 267 268 269 270 271 272 273 274 275 276 277 @validator ( \"basepath\" , pre = True ) def cast_pathlib ( cls , value ): \"\"\" If basepath provided, it means we aren't writing to the root directory of the bucket. We need to ensure that it is a valid path. This is called when the S3Bucket block is instantiated. \"\"\" if isinstance ( value , Path ): return str ( value ) return value check_credentials Ensure exactly 1 of 2 optional credentials fields has been provided by user. Source code in prefect_aws/s3.py 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 @root_validator ( pre = True ) def check_credentials ( cls , values ): \"\"\" Ensure exactly 1 of 2 optional credentials fields has been provided by user. \"\"\" minio_creds_exist = bool ( values . get ( \"minio_credentials\" )) aws_creds_exist = bool ( values . get ( \"aws_credentials\" )) # if both credentials fields provided if minio_creds_exist and aws_creds_exist : raise ValueError ( \"S3Bucket accepts a minio_credentials field or an\" \"aws_credentials field but not both.\" ) # if neither credentials fields provided if not minio_creds_exist and not aws_creds_exist : raise ValueError ( \"S3Bucket requires either a minio_credentials\" \"field or an aws_credentials field.\" ) return values read_path async Read specified path from S3 and return contents. Provide the entire path to the key in S3. Parameters: Name Type Description Default path str Entire path to (and including) the key. required Example Read \"subfolder/file1\" contents from an S3 bucket named \"bucket\": from prefect_aws import AwsCredentials from prefect_aws.s3 import S3Bucket aws_creds = AwsCredentials ( aws_access_key_id = AWS_ACCESS_KEY_ID , aws_secret_access_key = AWS_SECRET_ACCESS_KEY ) s3_bucket_block = S3Bucket ( bucket_name = \"bucket\" , aws_credentials = aws_creds , basepath = \"subfolder\" ) key_contents = s3_bucket_block . read_path ( path = \"subfolder/file1\" ) Source code in prefect_aws/s3.py 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 async def read_path ( self , path : str ) -> bytes : \"\"\" Read specified path from S3 and return contents. Provide the entire path to the key in S3. Args: path: Entire path to (and including) the key. Example: Read \"subfolder/file1\" contents from an S3 bucket named \"bucket\": ```python from prefect_aws import AwsCredentials from prefect_aws.s3 import S3Bucket aws_creds = AwsCredentials( aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY ) s3_bucket_block = S3Bucket( bucket_name=\"bucket\", aws_credentials=aws_creds, basepath=\"subfolder\" ) key_contents = s3_bucket_block.read_path(path=\"subfolder/file1\") ``` \"\"\" return await run_sync_in_worker_thread ( self . _read_sync , path ) write_path async Writes to an S3 bucket. Parameters: Name Type Description Default path str The key name. Each object in your bucket has a unique key (or key name). required content bytes What you are uploading to S3. required Example Write data to the path dogs/small_dogs/havanese in an S3 Bucket: from prefect_aws import MinioCredentials from prefect_aws.s3 import S3Bucket minio_creds = MinIOCredentials ( minio_root_user = \"minioadmin\" , minio_root_password = \"minioadmin\" , ) s3_bucket_block = S3Bucket ( bucket_name = \"bucket\" , minio_credentials = minio_creds , basepath = \"dogs/smalldogs\" , endpoint_url = \"http://localhost:9000\" , ) s3_havanese_path = s3_bucket_block . write_path ( path = \"havanese\" , content = data ) Source code in prefect_aws/s3.py 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 async def write_path ( self , path : str , content : bytes ) -> str : \"\"\" Writes to an S3 bucket. Args: path: The key name. Each object in your bucket has a unique key (or key name). content: What you are uploading to S3. Example: Write data to the path `dogs/small_dogs/havanese` in an S3 Bucket: ```python from prefect_aws import MinioCredentials from prefect_aws.s3 import S3Bucket minio_creds = MinIOCredentials( minio_root_user = \"minioadmin\", minio_root_password = \"minioadmin\", ) s3_bucket_block = S3Bucket( bucket_name=\"bucket\", minio_credentials=minio_creds, basepath=\"dogs/smalldogs\", endpoint_url=\"http://localhost:9000\", ) s3_havanese_path = s3_bucket_block.write_path(path=\"havanese\", content=data) ``` \"\"\" path = self . _resolve_path ( path ) await run_sync_in_worker_thread ( self . _write_sync , path , content ) return path s3_download async Downloads an object with a given key from a given S3 bucket. Parameters: Name Type Description Default bucket str Name of bucket to download object from. Required if a default value was not supplied when creating the task. required key str Key of object to download. Required if a default value was not supplied when creating the task. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required aws_client_parameters AwsClientParameters Custom parameter for the boto3 client initialization.. AwsClientParameters() Returns: Type Description bytes A bytes representation of the downloaded object. Example Download a file from an S3 bucket: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_download @flow async def example_s3_download_flow (): aws_credentials = AwsCredentials ( aws_access_key_id = \"acccess_key_id\" , aws_secret_access_key = \"secret_access_key\" ) data = await s3_download ( bucket = \"bucket\" , key = \"key\" , aws_credentials = aws_credentials , ) example_s3_download_flow () Source code in prefect_aws/s3.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 @task async def s3_download ( bucket : str , key : str , aws_credentials : AwsCredentials , aws_client_parameters : AwsClientParameters = AwsClientParameters (), ) -> bytes : \"\"\" Downloads an object with a given key from a given S3 bucket. Args: bucket: Name of bucket to download object from. Required if a default value was not supplied when creating the task. key: Key of object to download. Required if a default value was not supplied when creating the task. aws_credentials: Credentials to use for authentication with AWS. aws_client_parameters: Custom parameter for the boto3 client initialization.. Returns: A `bytes` representation of the downloaded object. Example: Download a file from an S3 bucket: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_download @flow async def example_s3_download_flow(): aws_credentials = AwsCredentials( aws_access_key_id=\"acccess_key_id\", aws_secret_access_key=\"secret_access_key\" ) data = await s3_download( bucket=\"bucket\", key=\"key\", aws_credentials=aws_credentials, ) example_s3_download_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Downloading object from bucket %s with key %s \" , bucket , key ) s3_client = aws_credentials . get_boto3_session () . client ( \"s3\" , ** aws_client_parameters . get_params_override () ) stream = io . BytesIO () await run_sync_in_worker_thread ( s3_client . download_fileobj , Bucket = bucket , Key = key , Fileobj = stream ) stream . seek ( 0 ) output = stream . read () return output s3_list_objects async Lists details of objects in a given S3 bucket. Parameters: Name Type Description Default bucket str Name of bucket to list items from. Required if a default value was not supplied when creating the task. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required aws_client_parameters AwsClientParameters Custom parameter for the boto3 client initialization.. AwsClientParameters() prefix str Used to filter objects with keys starting with the specified prefix. '' delimiter str Character used to group keys of listed objects. '' page_size Optional [ int ] Number of objects to return in each request to the AWS API. None max_items Optional [ int ] Maximum number of objects that to be returned by task. None jmespath_query Optional [ str ] Query used to filter objects based on object attributes refer to the boto3 docs for more information on how to construct queries. None Returns: Type Description List [ Dict [ str , Any ]] A list of dictionaries containing information about the objects retrieved. Refer to the boto3 docs for an example response. Example List all objects in a bucket: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_list_objects @flow async def example_s3_list_objects_flow (): aws_credentials = AwsCredentials ( aws_access_key_id = \"acccess_key_id\" , aws_secret_access_key = \"secret_access_key\" ) objects = await s3_list_objects ( bucket = \"data_bucket\" , aws_credentials = aws_credentials ) example_s3_list_objects_flow () Source code in prefect_aws/s3.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 @task async def s3_list_objects ( bucket : str , aws_credentials : AwsCredentials , aws_client_parameters : AwsClientParameters = AwsClientParameters (), prefix : str = \"\" , delimiter : str = \"\" , page_size : Optional [ int ] = None , max_items : Optional [ int ] = None , jmespath_query : Optional [ str ] = None , ) -> List [ Dict [ str , Any ]]: \"\"\" Lists details of objects in a given S3 bucket. Args: bucket: Name of bucket to list items from. Required if a default value was not supplied when creating the task. aws_credentials: Credentials to use for authentication with AWS. aws_client_parameters: Custom parameter for the boto3 client initialization.. prefix: Used to filter objects with keys starting with the specified prefix. delimiter: Character used to group keys of listed objects. page_size: Number of objects to return in each request to the AWS API. max_items: Maximum number of objects that to be returned by task. jmespath_query: Query used to filter objects based on object attributes refer to the [boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/paginators.html#filtering-results-with-jmespath) for more information on how to construct queries. Returns: A list of dictionaries containing information about the objects retrieved. Refer to the boto3 docs for an example response. Example: List all objects in a bucket: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_list_objects @flow async def example_s3_list_objects_flow(): aws_credentials = AwsCredentials( aws_access_key_id=\"acccess_key_id\", aws_secret_access_key=\"secret_access_key\" ) objects = await s3_list_objects( bucket=\"data_bucket\", aws_credentials=aws_credentials ) example_s3_list_objects_flow() ``` \"\"\" # noqa E501 logger = get_run_logger () logger . info ( \"Listing objects in bucket %s with prefix %s \" , bucket , prefix ) s3_client = aws_credentials . get_boto3_session () . client ( \"s3\" , ** aws_client_parameters . get_params_override () ) paginator = s3_client . get_paginator ( \"list_objects_v2\" ) page_iterator = paginator . paginate ( Bucket = bucket , Prefix = prefix , Delimiter = delimiter , PaginationConfig = { \"PageSize\" : page_size , \"MaxItems\" : max_items }, ) if jmespath_query : page_iterator = page_iterator . search ( f \" { jmespath_query } | {{ Contents: @ }} \" ) return await run_sync_in_worker_thread ( _list_objects_sync , page_iterator ) s3_upload async Uploads data to an S3 bucket. Parameters: Name Type Description Default data bytes Bytes representation of data to upload to S3. required bucket str Name of bucket to upload data to. Required if a default value was not supplied when creating the task. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required aws_client_parameters AwsClientParameters Custom parameter for the boto3 client initialization.. AwsClientParameters() key Optional [ str ] Key of object to download. Defaults to a UUID string. None Returns: Type Description str The key of the uploaded object Example Read and upload a file to an S3 bucket: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_upload @flow async def example_s3_upload_flow (): aws_credentials = AwsCredentials ( aws_access_key_id = \"acccess_key_id\" , aws_secret_access_key = \"secret_access_key\" ) with open ( \"data.csv\" , \"rb\" ) as file : key = await s3_upload ( bucket = \"bucket\" , key = \"data.csv\" , data = file . read (), aws_credentials = aws_credentials , ) example_s3_upload_flow () Source code in prefect_aws/s3.py 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 @task async def s3_upload ( data : bytes , bucket : str , aws_credentials : AwsCredentials , aws_client_parameters : AwsClientParameters = AwsClientParameters (), key : Optional [ str ] = None , ) -> str : \"\"\" Uploads data to an S3 bucket. Args: data: Bytes representation of data to upload to S3. bucket: Name of bucket to upload data to. Required if a default value was not supplied when creating the task. aws_credentials: Credentials to use for authentication with AWS. aws_client_parameters: Custom parameter for the boto3 client initialization.. key: Key of object to download. Defaults to a UUID string. Returns: The key of the uploaded object Example: Read and upload a file to an S3 bucket: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_upload @flow async def example_s3_upload_flow(): aws_credentials = AwsCredentials( aws_access_key_id=\"acccess_key_id\", aws_secret_access_key=\"secret_access_key\" ) with open(\"data.csv\", \"rb\") as file: key = await s3_upload( bucket=\"bucket\", key=\"data.csv\", data=file.read(), aws_credentials=aws_credentials, ) example_s3_upload_flow() ``` \"\"\" logger = get_run_logger () key = key or str ( uuid . uuid4 ()) logger . info ( \"Uploading object to bucket %s with key %s \" , bucket , key ) s3_client = aws_credentials . get_boto3_session () . client ( \"s3\" , ** aws_client_parameters . get_params_override () ) stream = io . BytesIO ( data ) await run_sync_in_worker_thread ( s3_client . upload_fileobj , stream , Bucket = bucket , Key = key ) return key","title":"S3"},{"location":"s3/#prefect_aws.s3","text":"Tasks for interacting with AWS S3","title":"s3"},{"location":"s3/#prefect_aws.s3.S3Bucket","text":"Block used to store data using AWS S3 or S3-compatible object storage like MinIO. Parameters: Name Type Description Default bucket_name Name of your bucket. required aws_credentials A block containing your credentials (choose this or minio_credentials). required minio_credentials A block containing your credentials (choose this or aws_credentials). required basepath Used when you don't want to read/write at base level. required endpoint_url Used for non-AWS configuration. When unspecified, defaults to AWS. required Example Load stored S3Bucket configuration: from prefect_aws.s3 import S3Bucket s3bucket_block = S3Bucket . load ( \"BLOCK_NAME\" ) Source code in prefect_aws/s3.pyclass S3Bucket ( ReadableFileSystem , WritableFileSystem ): \"\"\" Block used to store data using AWS S3 or S3-compatible object storage like MinIO. Args: bucket_name: Name of your bucket. aws_credentials: A block containing your credentials (choose this or minio_credentials). minio_credentials: A block containing your credentials (choose this or aws_credentials). basepath: Used when you don't want to read/write at base level. endpoint_url: Used for non-AWS configuration. When unspecified, defaults to AWS. Example: Load stored S3Bucket configuration: ```python from prefect_aws.s3 import S3Bucket s3bucket_block = S3Bucket.load(\"BLOCK_NAME\") ``` \"\"\" # change _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/uPezmBzEv4moXKdQJ3YyL/a1f029b423cf67f474d1eee33c1463d7/pngwing.com.png?h=250\" # noqa _block_type_name = \"S3 Bucket\" bucket_name : str minio_credentials : Optional [ MinIOCredentials ] aws_credentials : Optional [ AwsCredentials ] basepath : Optional [ Path ] endpoint_url : Optional [ str ] @validator ( \"basepath\" , pre = True ) def cast_pathlib ( cls , value ): \"\"\" If basepath provided, it means we aren't writing to the root directory of the bucket. We need to ensure that it is a valid path. This is called when the S3Bucket block is instantiated. \"\"\" if isinstance ( value , Path ): return str ( value ) return value @root_validator ( pre = True ) def check_credentials ( cls , values ): \"\"\" Ensure exactly 1 of 2 optional credentials fields has been provided by user. \"\"\" minio_creds_exist = bool ( values . get ( \"minio_credentials\" )) aws_creds_exist = bool ( values . get ( \"aws_credentials\" )) # if both credentials fields provided if minio_creds_exist and aws_creds_exist : raise ValueError ( \"S3Bucket accepts a minio_credentials field or an\" \"aws_credentials field but not both.\" ) # if neither credentials fields provided if not minio_creds_exist and not aws_creds_exist : raise ValueError ( \"S3Bucket requires either a minio_credentials\" \"field or an aws_credentials field.\" ) return values def _resolve_path ( self , path : str ) -> Path : \"\"\" A helper function used in write_path to join `self.basepath` and `path`. Args: path: Name of the key, e.g. \"file1\". Each object in your bucket has a unique key (or key name). \"\"\" path = path or str ( uuid4 ()) # If basepath provided, it means we won't write to the root dir of # the bucket. So we need to add it on the front of the path. path = str ( Path ( self . basepath ) / path ) if self . basepath else path return path def _get_s3_client ( self ) -> boto3 . client : \"\"\" Authenticate MinIO credentials or AWS credentials and return an S3 client. This is a helper function called by read_path() or write_path(). \"\"\" if self . minio_credentials : s3_client = self . minio_credentials . get_boto3_session () . client ( service_name = \"s3\" , endpoint_url = self . endpoint_url ) elif self . aws_credentials : s3_client = self . aws_credentials . get_boto3_session () . client ( service_name = \"s3\" ) return s3_client async def read_path ( self , path : str ) -> bytes : \"\"\" Read specified path from S3 and return contents. Provide the entire path to the key in S3. Args: path: Entire path to (and including) the key. Example: Read \"subfolder/file1\" contents from an S3 bucket named \"bucket\": ```python from prefect_aws import AwsCredentials from prefect_aws.s3 import S3Bucket aws_creds = AwsCredentials( aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY ) s3_bucket_block = S3Bucket( bucket_name=\"bucket\", aws_credentials=aws_creds, basepath=\"subfolder\" ) key_contents = s3_bucket_block.read_path(path=\"subfolder/file1\") ``` \"\"\" return await run_sync_in_worker_thread ( self . _read_sync , path ) def _read_sync ( self , key : str ) -> bytes : \"\"\" Called by read_path(). Creates an S3 client and retrieves the contents from a specified path. \"\"\" s3_client = self . _get_s3_client () with io . BytesIO () as stream : s3_client . download_fileobj ( Bucket = self . bucket_name , Key = key , Fileobj = stream ) stream . seek ( 0 ) output = stream . read () return output async def write_path ( self , path : str , content : bytes ) -> str : \"\"\" Writes to an S3 bucket. Args: path: The key name. Each object in your bucket has a unique key (or key name). content: What you are uploading to S3. Example: Write data to the path `dogs/small_dogs/havanese` in an S3 Bucket: ```python from prefect_aws import MinioCredentials from prefect_aws.s3 import S3Bucket minio_creds = MinIOCredentials( minio_root_user = \"minioadmin\", minio_root_password = \"minioadmin\", ) s3_bucket_block = S3Bucket( bucket_name=\"bucket\", minio_credentials=minio_creds, basepath=\"dogs/smalldogs\", endpoint_url=\"http://localhost:9000\", ) s3_havanese_path = s3_bucket_block.write_path(path=\"havanese\", content=data) ``` \"\"\" path = self . _resolve_path ( path ) await run_sync_in_worker_thread ( self . _write_sync , path , content ) return path def _write_sync ( self , key : str , data : bytes ) -> None : \"\"\" Called by write_path(). Creates an S3 client and uploads a file object. \"\"\" s3_client = self . _get_s3_client () with io . BytesIO ( data ) as stream : s3_client . upload_fileobj ( Fileobj = stream , Bucket = self . bucket_name , Key = key )","title":"S3Bucket"},{"location":"s3/#prefect_aws.s3.S3Bucket.cast_pathlib","text":"If basepath provided, it means we aren't writing to the root directory of the bucket. We need to ensure that it is a valid path. This is called when the S3Bucket block is instantiated. Source code in prefect_aws/s3.py 266 267 268 269 270 271 272 273 274 275 276 277 @validator ( \"basepath\" , pre = True ) def cast_pathlib ( cls , value ): \"\"\" If basepath provided, it means we aren't writing to the root directory of the bucket. We need to ensure that it is a valid path. This is called when the S3Bucket block is instantiated. \"\"\" if isinstance ( value , Path ): return str ( value ) return value","title":"cast_pathlib()"},{"location":"s3/#prefect_aws.s3.S3Bucket.check_credentials","text":"Ensure exactly 1 of 2 optional credentials fields has been provided by user. Source code in prefect_aws/s3.py 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 @root_validator ( pre = True ) def check_credentials ( cls , values ): \"\"\" Ensure exactly 1 of 2 optional credentials fields has been provided by user. \"\"\" minio_creds_exist = bool ( values . get ( \"minio_credentials\" )) aws_creds_exist = bool ( values . get ( \"aws_credentials\" )) # if both credentials fields provided if minio_creds_exist and aws_creds_exist : raise ValueError ( \"S3Bucket accepts a minio_credentials field or an\" \"aws_credentials field but not both.\" ) # if neither credentials fields provided if not minio_creds_exist and not aws_creds_exist : raise ValueError ( \"S3Bucket requires either a minio_credentials\" \"field or an aws_credentials field.\" ) return values","title":"check_credentials()"},{"location":"s3/#prefect_aws.s3.S3Bucket.read_path","text":"Read specified path from S3 and return contents. Provide the entire path to the key in S3. Parameters: Name Type Description Default path str Entire path to (and including) the key. required Example Read \"subfolder/file1\" contents from an S3 bucket named \"bucket\": from prefect_aws import AwsCredentials from prefect_aws.s3 import S3Bucket aws_creds = AwsCredentials ( aws_access_key_id = AWS_ACCESS_KEY_ID , aws_secret_access_key = AWS_SECRET_ACCESS_KEY ) s3_bucket_block = S3Bucket ( bucket_name = \"bucket\" , aws_credentials = aws_creds , basepath = \"subfolder\" ) key_contents = s3_bucket_block . read_path ( path = \"subfolder/file1\" ) Source code in prefect_aws/s3.py 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 async def read_path ( self , path : str ) -> bytes : \"\"\" Read specified path from S3 and return contents. Provide the entire path to the key in S3. Args: path: Entire path to (and including) the key. Example: Read \"subfolder/file1\" contents from an S3 bucket named \"bucket\": ```python from prefect_aws import AwsCredentials from prefect_aws.s3 import S3Bucket aws_creds = AwsCredentials( aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY ) s3_bucket_block = S3Bucket( bucket_name=\"bucket\", aws_credentials=aws_creds, basepath=\"subfolder\" ) key_contents = s3_bucket_block.read_path(path=\"subfolder/file1\") ``` \"\"\" return await run_sync_in_worker_thread ( self . _read_sync , path )","title":"read_path()"},{"location":"s3/#prefect_aws.s3.S3Bucket.write_path","text":"Writes to an S3 bucket. Parameters: Name Type Description Default path str The key name. Each object in your bucket has a unique key (or key name). required content bytes What you are uploading to S3. required Example Write data to the path dogs/small_dogs/havanese in an S3 Bucket: from prefect_aws import MinioCredentials from prefect_aws.s3 import S3Bucket minio_creds = MinIOCredentials ( minio_root_user = \"minioadmin\" , minio_root_password = \"minioadmin\" , ) s3_bucket_block = S3Bucket ( bucket_name = \"bucket\" , minio_credentials = minio_creds , basepath = \"dogs/smalldogs\" , endpoint_url = \"http://localhost:9000\" , ) s3_havanese_path = s3_bucket_block . write_path ( path = \"havanese\" , content = data ) Source code in prefect_aws/s3.py 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 async def write_path ( self , path : str , content : bytes ) -> str : \"\"\" Writes to an S3 bucket. Args: path: The key name. Each object in your bucket has a unique key (or key name). content: What you are uploading to S3. Example: Write data to the path `dogs/small_dogs/havanese` in an S3 Bucket: ```python from prefect_aws import MinioCredentials from prefect_aws.s3 import S3Bucket minio_creds = MinIOCredentials( minio_root_user = \"minioadmin\", minio_root_password = \"minioadmin\", ) s3_bucket_block = S3Bucket( bucket_name=\"bucket\", minio_credentials=minio_creds, basepath=\"dogs/smalldogs\", endpoint_url=\"http://localhost:9000\", ) s3_havanese_path = s3_bucket_block.write_path(path=\"havanese\", content=data) ``` \"\"\" path = self . _resolve_path ( path ) await run_sync_in_worker_thread ( self . _write_sync , path , content ) return path","title":"write_path()"},{"location":"s3/#prefect_aws.s3.s3_download","text":"Downloads an object with a given key from a given S3 bucket. Parameters: Name Type Description Default bucket str Name of bucket to download object from. Required if a default value was not supplied when creating the task. required key str Key of object to download. Required if a default value was not supplied when creating the task. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required aws_client_parameters AwsClientParameters Custom parameter for the boto3 client initialization.. AwsClientParameters() Returns: Type Description bytes A bytes representation of the downloaded object. Example Download a file from an S3 bucket: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_download @flow async def example_s3_download_flow (): aws_credentials = AwsCredentials ( aws_access_key_id = \"acccess_key_id\" , aws_secret_access_key = \"secret_access_key\" ) data = await s3_download ( bucket = \"bucket\" , key = \"key\" , aws_credentials = aws_credentials , ) example_s3_download_flow () Source code in prefect_aws/s3.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 @task async def s3_download ( bucket : str , key : str , aws_credentials : AwsCredentials , aws_client_parameters : AwsClientParameters = AwsClientParameters (), ) -> bytes : \"\"\" Downloads an object with a given key from a given S3 bucket. Args: bucket: Name of bucket to download object from. Required if a default value was not supplied when creating the task. key: Key of object to download. Required if a default value was not supplied when creating the task. aws_credentials: Credentials to use for authentication with AWS. aws_client_parameters: Custom parameter for the boto3 client initialization.. Returns: A `bytes` representation of the downloaded object. Example: Download a file from an S3 bucket: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_download @flow async def example_s3_download_flow(): aws_credentials = AwsCredentials( aws_access_key_id=\"acccess_key_id\", aws_secret_access_key=\"secret_access_key\" ) data = await s3_download( bucket=\"bucket\", key=\"key\", aws_credentials=aws_credentials, ) example_s3_download_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Downloading object from bucket %s with key %s \" , bucket , key ) s3_client = aws_credentials . get_boto3_session () . client ( \"s3\" , ** aws_client_parameters . get_params_override () ) stream = io . BytesIO () await run_sync_in_worker_thread ( s3_client . download_fileobj , Bucket = bucket , Key = key , Fileobj = stream ) stream . seek ( 0 ) output = stream . read () return output","title":"s3_download()"},{"location":"s3/#prefect_aws.s3.s3_list_objects","text":"Lists details of objects in a given S3 bucket. Parameters: Name Type Description Default bucket str Name of bucket to list items from. Required if a default value was not supplied when creating the task. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required aws_client_parameters AwsClientParameters Custom parameter for the boto3 client initialization.. AwsClientParameters() prefix str Used to filter objects with keys starting with the specified prefix. '' delimiter str Character used to group keys of listed objects. '' page_size Optional [ int ] Number of objects to return in each request to the AWS API. None max_items Optional [ int ] Maximum number of objects that to be returned by task. None jmespath_query Optional [ str ] Query used to filter objects based on object attributes refer to the boto3 docs for more information on how to construct queries. None Returns: Type Description List [ Dict [ str , Any ]] A list of dictionaries containing information about the objects retrieved. Refer to the boto3 docs for an example response. Example List all objects in a bucket: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_list_objects @flow async def example_s3_list_objects_flow (): aws_credentials = AwsCredentials ( aws_access_key_id = \"acccess_key_id\" , aws_secret_access_key = \"secret_access_key\" ) objects = await s3_list_objects ( bucket = \"data_bucket\" , aws_credentials = aws_credentials ) example_s3_list_objects_flow () Source code in prefect_aws/s3.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 @task async def s3_list_objects ( bucket : str , aws_credentials : AwsCredentials , aws_client_parameters : AwsClientParameters = AwsClientParameters (), prefix : str = \"\" , delimiter : str = \"\" , page_size : Optional [ int ] = None , max_items : Optional [ int ] = None , jmespath_query : Optional [ str ] = None , ) -> List [ Dict [ str , Any ]]: \"\"\" Lists details of objects in a given S3 bucket. Args: bucket: Name of bucket to list items from. Required if a default value was not supplied when creating the task. aws_credentials: Credentials to use for authentication with AWS. aws_client_parameters: Custom parameter for the boto3 client initialization.. prefix: Used to filter objects with keys starting with the specified prefix. delimiter: Character used to group keys of listed objects. page_size: Number of objects to return in each request to the AWS API. max_items: Maximum number of objects that to be returned by task. jmespath_query: Query used to filter objects based on object attributes refer to the [boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/paginators.html#filtering-results-with-jmespath) for more information on how to construct queries. Returns: A list of dictionaries containing information about the objects retrieved. Refer to the boto3 docs for an example response. Example: List all objects in a bucket: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_list_objects @flow async def example_s3_list_objects_flow(): aws_credentials = AwsCredentials( aws_access_key_id=\"acccess_key_id\", aws_secret_access_key=\"secret_access_key\" ) objects = await s3_list_objects( bucket=\"data_bucket\", aws_credentials=aws_credentials ) example_s3_list_objects_flow() ``` \"\"\" # noqa E501 logger = get_run_logger () logger . info ( \"Listing objects in bucket %s with prefix %s \" , bucket , prefix ) s3_client = aws_credentials . get_boto3_session () . client ( \"s3\" , ** aws_client_parameters . get_params_override () ) paginator = s3_client . get_paginator ( \"list_objects_v2\" ) page_iterator = paginator . paginate ( Bucket = bucket , Prefix = prefix , Delimiter = delimiter , PaginationConfig = { \"PageSize\" : page_size , \"MaxItems\" : max_items }, ) if jmespath_query : page_iterator = page_iterator . search ( f \" { jmespath_query } | {{ Contents: @ }} \" ) return await run_sync_in_worker_thread ( _list_objects_sync , page_iterator )","title":"s3_list_objects()"},{"location":"s3/#prefect_aws.s3.s3_upload","text":"Uploads data to an S3 bucket. Parameters: Name Type Description Default data bytes Bytes representation of data to upload to S3. required bucket str Name of bucket to upload data to. Required if a default value was not supplied when creating the task. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required aws_client_parameters AwsClientParameters Custom parameter for the boto3 client initialization.. AwsClientParameters() key Optional [ str ] Key of object to download. Defaults to a UUID string. None Returns: Type Description str The key of the uploaded object Example Read and upload a file to an S3 bucket: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_upload @flow async def example_s3_upload_flow (): aws_credentials = AwsCredentials ( aws_access_key_id = \"acccess_key_id\" , aws_secret_access_key = \"secret_access_key\" ) with open ( \"data.csv\" , \"rb\" ) as file : key = await s3_upload ( bucket = \"bucket\" , key = \"data.csv\" , data = file . read (), aws_credentials = aws_credentials , ) example_s3_upload_flow () Source code in prefect_aws/s3.py 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 @task async def s3_upload ( data : bytes , bucket : str , aws_credentials : AwsCredentials , aws_client_parameters : AwsClientParameters = AwsClientParameters (), key : Optional [ str ] = None , ) -> str : \"\"\" Uploads data to an S3 bucket. Args: data: Bytes representation of data to upload to S3. bucket: Name of bucket to upload data to. Required if a default value was not supplied when creating the task. aws_credentials: Credentials to use for authentication with AWS. aws_client_parameters: Custom parameter for the boto3 client initialization.. key: Key of object to download. Defaults to a UUID string. Returns: The key of the uploaded object Example: Read and upload a file to an S3 bucket: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.s3 import s3_upload @flow async def example_s3_upload_flow(): aws_credentials = AwsCredentials( aws_access_key_id=\"acccess_key_id\", aws_secret_access_key=\"secret_access_key\" ) with open(\"data.csv\", \"rb\") as file: key = await s3_upload( bucket=\"bucket\", key=\"data.csv\", data=file.read(), aws_credentials=aws_credentials, ) example_s3_upload_flow() ``` \"\"\" logger = get_run_logger () key = key or str ( uuid . uuid4 ()) logger . info ( \"Uploading object to bucket %s with key %s \" , bucket , key ) s3_client = aws_credentials . get_boto3_session () . client ( \"s3\" , ** aws_client_parameters . get_params_override () ) stream = io . BytesIO ( data ) await run_sync_in_worker_thread ( s3_client . upload_fileobj , stream , Bucket = bucket , Key = key ) return key","title":"s3_upload()"},{"location":"secrets_manager/","text":"prefect_aws.secrets_manager Tasks for interacting with AWS Secrets Manager create_secret async Creates a secret in AWS Secrets Manager. Parameters: Name Type Description Default secret_name str The name of the secret to create. required secret_value Union [ str , bytes ] The value to store in the created secret. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required description Optional [ str ] A description for the created secret. None tags Optional [ List [ Dict [ str , str ]]] A list of tags to attach to the secret. Each tag should be specified as a dictionary in the following format: { \"Key\" : str , \"Value\" : str } None Returns: Type Description Dict [ str , str ] Dict[str, str]: A dict containing the secret ARN (Amazon Resource Name), name, and current version ID. { \"ARN\" : str , \"Name\" : str , \"VersionId\" : str } Example Create a secret: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import create_secret @flow def example_create_secret (): aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) create_secret ( secret_name = \"life_the_universe_and_everything\" , secret_value = \"42\" , aws_credentials = aws_credentials ) example_create_secret () Source code in prefect_aws/secrets_manager.py 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 @task async def create_secret ( secret_name : str , secret_value : Union [ str , bytes ], aws_credentials : AwsCredentials , description : Optional [ str ] = None , tags : Optional [ List [ Dict [ str , str ]]] = None , ) -> Dict [ str , str ]: \"\"\" Creates a secret in AWS Secrets Manager. Args: secret_name: The name of the secret to create. secret_value: The value to store in the created secret. aws_credentials: Credentials to use for authentication with AWS. description: A description for the created secret. tags: A list of tags to attach to the secret. Each tag should be specified as a dictionary in the following format: ```python { \"Key\": str, \"Value\": str } ``` Returns: Dict[str, str]: A dict containing the secret ARN (Amazon Resource Name), name, and current version ID. ```python { \"ARN\": str, \"Name\": str, \"VersionId\": str } ``` Example: Create a secret: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import create_secret @flow def example_create_secret(): aws_credentials = AwsCredentials( aws_access_key_id=\"access_key_id\", aws_secret_access_key=\"secret_access_key\" ) create_secret( secret_name=\"life_the_universe_and_everything\", secret_value=\"42\", aws_credentials=aws_credentials ) example_create_secret() ``` \"\"\" create_secret_kwargs : Dict [ str , Union [ str , bytes , List [ Dict [ str , str ]]]] = dict ( Name = secret_name ) if description is not None : create_secret_kwargs [ \"Description\" ] = description if tags is not None : create_secret_kwargs [ \"Tags\" ] = tags if isinstance ( secret_value , bytes ): create_secret_kwargs [ \"SecretBinary\" ] = secret_value elif isinstance ( secret_value , str ): create_secret_kwargs [ \"SecretString\" ] = secret_value else : raise ValueError ( \"Please provide a bytes or str value for secret_value\" ) logger = get_run_logger () logger . info ( \"Creating secret named %s \" , secret_name ) client = aws_credentials . get_boto3_session () . client ( \"secretsmanager\" ) try : response = await run_sync_in_worker_thread ( client . create_secret , ** create_secret_kwargs ) print ( response . pop ( \"ResponseMetadata\" , None )) return response except ClientError : logger . exception ( \"Unable to create secret %s \" , secret_name ) raise delete_secret async Deletes a secret from AWS Secrets Manager. Secrets can either be deleted immediately by setting force_delete_without_recovery equal to True . Otherwise, secrets will be marked for deletion and available for recovery for the number of days specified in recovery_window_in_days Parameters: Name Type Description Default secret_name str Name of the secret to be deleted. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required recovery_window_in_days int Number of days a secret should be recoverable for before permenant deletion. Minium window is 7 days and maximum window is 30 days. If force_delete_without_recovery is set to True , this value will be ignored. 30 force_delete_without_recovery bool If True , the secret will be immediately deleted and will not be recoverable. False Returns: Type Description Dict[str, str]: A dict containing the secret ARN (Amazon Resource Name), name, and deletion date of the secret. DeletionDate is the date and time of the delete request plus the number of days in recovery_window_in_days . { \"ARN\" : str , \"Name\" : str , \"DeletionDate\" : datetime . datetime } Examples: Delete a secret immediately: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import delete_secret @flow def example_delete_secret_immediately (): aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) delete_secret ( secret_name = \"life_the_universe_and_everything\" , aws_credentials = aws_credentials , force_delete_without_recovery : True ) example_delete_secret_immediately () Delete a secret with a 90 day recovery window: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import delete_secret @flow def example_delete_secret_with_recovery_window (): aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) delete_secret ( secret_name = \"life_the_universe_and_everything\" , aws_credentials = aws_credentials , recovery_window_in_days = 90 ) example_delete_secret_with_recovery_window () Source code in prefect_aws/secrets_manager.py 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 @task async def delete_secret ( secret_name : str , aws_credentials : AwsCredentials , recovery_window_in_days : int = 30 , force_delete_without_recovery : bool = False , ): \"\"\" Deletes a secret from AWS Secrets Manager. Secrets can either be deleted immediately by setting `force_delete_without_recovery` equal to `True`. Otherwise, secrets will be marked for deletion and available for recovery for the number of days specified in `recovery_window_in_days` Args: secret_name: Name of the secret to be deleted. aws_credentials: Credentials to use for authentication with AWS. recovery_window_in_days: Number of days a secret should be recoverable for before permenant deletion. Minium window is 7 days and maximum window is 30 days. If `force_delete_without_recovery` is set to `True`, this value will be ignored. force_delete_without_recovery: If `True`, the secret will be immediately deleted and will not be recoverable. Returns: Dict[str, str]: A dict containing the secret ARN (Amazon Resource Name), name, and deletion date of the secret. DeletionDate is the date and time of the delete request plus the number of days in `recovery_window_in_days`. ```python { \"ARN\": str, \"Name\": str, \"DeletionDate\": datetime.datetime } ``` Examples: Delete a secret immediately: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import delete_secret @flow def example_delete_secret_immediately(): aws_credentials = AwsCredentials( aws_access_key_id=\"access_key_id\", aws_secret_access_key=\"secret_access_key\" ) delete_secret( secret_name=\"life_the_universe_and_everything\", aws_credentials=aws_credentials, force_delete_without_recovery: True ) example_delete_secret_immediately() ``` Delete a secret with a 90 day recovery window: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import delete_secret @flow def example_delete_secret_with_recovery_window(): aws_credentials = AwsCredentials( aws_access_key_id=\"access_key_id\", aws_secret_access_key=\"secret_access_key\" ) delete_secret( secret_name=\"life_the_universe_and_everything\", aws_credentials=aws_credentials, recovery_window_in_days=90 ) example_delete_secret_with_recovery_window() ``` \"\"\" if not force_delete_without_recovery and not ( 7 <= recovery_window_in_days <= 30 ): raise ValueError ( \"Recovery window must be between 7 and 30 days.\" ) delete_secret_kwargs : Dict [ str , Union [ str , int , bool ]] = dict ( SecretId = secret_name ) if force_delete_without_recovery : delete_secret_kwargs [ \"ForceDeleteWithoutRecovery\" ] = force_delete_without_recovery else : delete_secret_kwargs [ \"RecoveryWindowInDays\" ] = recovery_window_in_days logger = get_run_logger () logger . info ( \"Deleting secret %s \" , secret_name ) client = aws_credentials . get_boto3_session () . client ( \"secretsmanager\" ) try : response = await run_sync_in_worker_thread ( client . delete_secret , ** delete_secret_kwargs ) response . pop ( \"ResponseMetadata\" , None ) return response except ClientError : logger . exception ( \"Unable to delete secret %s \" , secret_name ) raise read_secret async Reads the value of a given secret from AWS Secrets Manager. Parameters: Name Type Description Default secret_name str Name of stored secret. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required version_id Optional [ str ] Specifies version of secret to read. Defaults to the most recent version if not given. None version_stage Optional [ str ] Specifies the version stage of the secret to read. Defaults to AWS_CURRENT if not given. None Returns: Type Description Union [ str , bytes ] The secret values as a str or bytes depending on the format in which the secret was stored. Example Read a secret value: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import read_secret @flow def example_read_secret (): aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) secret_value = read_secret ( secret_name = \"db_password\" , aws_credentials = aws_credentials ) example_read_secret () Source code in prefect_aws/secrets_manager.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 @task async def read_secret ( secret_name : str , aws_credentials : AwsCredentials , version_id : Optional [ str ] = None , version_stage : Optional [ str ] = None , ) -> Union [ str , bytes ]: \"\"\" Reads the value of a given secret from AWS Secrets Manager. Args: secret_name: Name of stored secret. aws_credentials: Credentials to use for authentication with AWS. version_id: Specifies version of secret to read. Defaults to the most recent version if not given. version_stage: Specifies the version stage of the secret to read. Defaults to AWS_CURRENT if not given. Returns: The secret values as a `str` or `bytes` depending on the format in which the secret was stored. Example: Read a secret value: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import read_secret @flow def example_read_secret(): aws_credentials = AwsCredentials( aws_access_key_id=\"access_key_id\", aws_secret_access_key=\"secret_access_key\" ) secret_value = read_secret( secret_name=\"db_password\", aws_credentials=aws_credentials ) example_read_secret() ``` \"\"\" logger = get_run_logger () logger . info ( \"Getting value for secret %s \" , secret_name ) client = aws_credentials . get_boto3_session () . client ( \"secretsmanager\" ) get_secret_value_kwargs = dict ( SecretId = secret_name ) if version_id is not None : get_secret_value_kwargs [ \"VersionId\" ] = version_id if version_stage is not None : get_secret_value_kwargs [ \"VersionStage\" ] = version_stage try : response = await run_sync_in_worker_thread ( client . get_secret_value , ** get_secret_value_kwargs ) except ClientError : logger . exception ( \"Unable to get value for secret %s \" , secret_name ) raise else : return response . get ( \"SecretString\" ) or response . get ( \"SecretBinary\" ) update_secret async Updates the value of a given secret in AWS Secrets Manager. Parameters: Name Type Description Default secret_name str Name of secret to update. required secret_value Union [ str , bytes ] Desired value of the secret. Can be either str or bytes . required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required description Optional [ str ] Desired description of the secret. None Returns: Type Description Dict [ str , str ] Dict[str, str]: A dict containing the secret ARN (Amazon Resource Name), name, and current version ID. { \"ARN\" : str , \"Name\" : str , \"VersionId\" : str } Example Update a secret value: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import update_secret @flow def example_update_secret (): aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) update_secret ( secret_name = \"life_the_universe_and_everything\" , secret_value = \"42\" , aws_credentials = aws_credentials ) example_update_secret () Source code in prefect_aws/secrets_manager.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 @task async def update_secret ( secret_name : str , secret_value : Union [ str , bytes ], aws_credentials : AwsCredentials , description : Optional [ str ] = None , ) -> Dict [ str , str ]: \"\"\" Updates the value of a given secret in AWS Secrets Manager. Args: secret_name: Name of secret to update. secret_value: Desired value of the secret. Can be either `str` or `bytes`. aws_credentials: Credentials to use for authentication with AWS. description: Desired description of the secret. Returns: Dict[str, str]: A dict containing the secret ARN (Amazon Resource Name), name, and current version ID. ```python { \"ARN\": str, \"Name\": str, \"VersionId\": str } ``` Example: Update a secret value: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import update_secret @flow def example_update_secret(): aws_credentials = AwsCredentials( aws_access_key_id=\"access_key_id\", aws_secret_access_key=\"secret_access_key\" ) update_secret( secret_name=\"life_the_universe_and_everything\", secret_value=\"42\", aws_credentials=aws_credentials ) example_update_secret() ``` \"\"\" update_secret_kwargs : Dict [ str , Union [ str , bytes ]] = dict ( SecretId = secret_name ) if description is not None : update_secret_kwargs [ \"Description\" ] = description if isinstance ( secret_value , bytes ): update_secret_kwargs [ \"SecretBinary\" ] = secret_value elif isinstance ( secret_value , str ): update_secret_kwargs [ \"SecretString\" ] = secret_value else : raise ValueError ( \"Please provide a bytes or str value for secret_value\" ) logger = get_run_logger () logger . info ( \"Updating value for secret %s \" , secret_name ) client = aws_credentials . get_boto3_session () . client ( \"secretsmanager\" ) try : response = await run_sync_in_worker_thread ( client . update_secret , ** update_secret_kwargs ) response . pop ( \"ResponseMetadata\" , None ) return response except ClientError : logger . exception ( \"Unable to update secret %s \" , secret_name ) raise","title":"Secrets Manager"},{"location":"secrets_manager/#prefect_aws.secrets_manager","text":"Tasks for interacting with AWS Secrets Manager","title":"secrets_manager"},{"location":"secrets_manager/#prefect_aws.secrets_manager.create_secret","text":"Creates a secret in AWS Secrets Manager. Parameters: Name Type Description Default secret_name str The name of the secret to create. required secret_value Union [ str , bytes ] The value to store in the created secret. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required description Optional [ str ] A description for the created secret. None tags Optional [ List [ Dict [ str , str ]]] A list of tags to attach to the secret. Each tag should be specified as a dictionary in the following format: { \"Key\" : str , \"Value\" : str } None Returns: Type Description Dict [ str , str ] Dict[str, str]: A dict containing the secret ARN (Amazon Resource Name), name, and current version ID. { \"ARN\" : str , \"Name\" : str , \"VersionId\" : str } Example Create a secret: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import create_secret @flow def example_create_secret (): aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) create_secret ( secret_name = \"life_the_universe_and_everything\" , secret_value = \"42\" , aws_credentials = aws_credentials ) example_create_secret () Source code in prefect_aws/secrets_manager.py 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 @task async def create_secret ( secret_name : str , secret_value : Union [ str , bytes ], aws_credentials : AwsCredentials , description : Optional [ str ] = None , tags : Optional [ List [ Dict [ str , str ]]] = None , ) -> Dict [ str , str ]: \"\"\" Creates a secret in AWS Secrets Manager. Args: secret_name: The name of the secret to create. secret_value: The value to store in the created secret. aws_credentials: Credentials to use for authentication with AWS. description: A description for the created secret. tags: A list of tags to attach to the secret. Each tag should be specified as a dictionary in the following format: ```python { \"Key\": str, \"Value\": str } ``` Returns: Dict[str, str]: A dict containing the secret ARN (Amazon Resource Name), name, and current version ID. ```python { \"ARN\": str, \"Name\": str, \"VersionId\": str } ``` Example: Create a secret: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import create_secret @flow def example_create_secret(): aws_credentials = AwsCredentials( aws_access_key_id=\"access_key_id\", aws_secret_access_key=\"secret_access_key\" ) create_secret( secret_name=\"life_the_universe_and_everything\", secret_value=\"42\", aws_credentials=aws_credentials ) example_create_secret() ``` \"\"\" create_secret_kwargs : Dict [ str , Union [ str , bytes , List [ Dict [ str , str ]]]] = dict ( Name = secret_name ) if description is not None : create_secret_kwargs [ \"Description\" ] = description if tags is not None : create_secret_kwargs [ \"Tags\" ] = tags if isinstance ( secret_value , bytes ): create_secret_kwargs [ \"SecretBinary\" ] = secret_value elif isinstance ( secret_value , str ): create_secret_kwargs [ \"SecretString\" ] = secret_value else : raise ValueError ( \"Please provide a bytes or str value for secret_value\" ) logger = get_run_logger () logger . info ( \"Creating secret named %s \" , secret_name ) client = aws_credentials . get_boto3_session () . client ( \"secretsmanager\" ) try : response = await run_sync_in_worker_thread ( client . create_secret , ** create_secret_kwargs ) print ( response . pop ( \"ResponseMetadata\" , None )) return response except ClientError : logger . exception ( \"Unable to create secret %s \" , secret_name ) raise","title":"create_secret()"},{"location":"secrets_manager/#prefect_aws.secrets_manager.delete_secret","text":"Deletes a secret from AWS Secrets Manager. Secrets can either be deleted immediately by setting force_delete_without_recovery equal to True . Otherwise, secrets will be marked for deletion and available for recovery for the number of days specified in recovery_window_in_days Parameters: Name Type Description Default secret_name str Name of the secret to be deleted. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required recovery_window_in_days int Number of days a secret should be recoverable for before permenant deletion. Minium window is 7 days and maximum window is 30 days. If force_delete_without_recovery is set to True , this value will be ignored. 30 force_delete_without_recovery bool If True , the secret will be immediately deleted and will not be recoverable. False Returns: Type Description Dict[str, str]: A dict containing the secret ARN (Amazon Resource Name), name, and deletion date of the secret. DeletionDate is the date and time of the delete request plus the number of days in recovery_window_in_days . { \"ARN\" : str , \"Name\" : str , \"DeletionDate\" : datetime . datetime } Examples: Delete a secret immediately: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import delete_secret @flow def example_delete_secret_immediately (): aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) delete_secret ( secret_name = \"life_the_universe_and_everything\" , aws_credentials = aws_credentials , force_delete_without_recovery : True ) example_delete_secret_immediately () Delete a secret with a 90 day recovery window: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import delete_secret @flow def example_delete_secret_with_recovery_window (): aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) delete_secret ( secret_name = \"life_the_universe_and_everything\" , aws_credentials = aws_credentials , recovery_window_in_days = 90 ) example_delete_secret_with_recovery_window () Source code in prefect_aws/secrets_manager.py 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 @task async def delete_secret ( secret_name : str , aws_credentials : AwsCredentials , recovery_window_in_days : int = 30 , force_delete_without_recovery : bool = False , ): \"\"\" Deletes a secret from AWS Secrets Manager. Secrets can either be deleted immediately by setting `force_delete_without_recovery` equal to `True`. Otherwise, secrets will be marked for deletion and available for recovery for the number of days specified in `recovery_window_in_days` Args: secret_name: Name of the secret to be deleted. aws_credentials: Credentials to use for authentication with AWS. recovery_window_in_days: Number of days a secret should be recoverable for before permenant deletion. Minium window is 7 days and maximum window is 30 days. If `force_delete_without_recovery` is set to `True`, this value will be ignored. force_delete_without_recovery: If `True`, the secret will be immediately deleted and will not be recoverable. Returns: Dict[str, str]: A dict containing the secret ARN (Amazon Resource Name), name, and deletion date of the secret. DeletionDate is the date and time of the delete request plus the number of days in `recovery_window_in_days`. ```python { \"ARN\": str, \"Name\": str, \"DeletionDate\": datetime.datetime } ``` Examples: Delete a secret immediately: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import delete_secret @flow def example_delete_secret_immediately(): aws_credentials = AwsCredentials( aws_access_key_id=\"access_key_id\", aws_secret_access_key=\"secret_access_key\" ) delete_secret( secret_name=\"life_the_universe_and_everything\", aws_credentials=aws_credentials, force_delete_without_recovery: True ) example_delete_secret_immediately() ``` Delete a secret with a 90 day recovery window: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import delete_secret @flow def example_delete_secret_with_recovery_window(): aws_credentials = AwsCredentials( aws_access_key_id=\"access_key_id\", aws_secret_access_key=\"secret_access_key\" ) delete_secret( secret_name=\"life_the_universe_and_everything\", aws_credentials=aws_credentials, recovery_window_in_days=90 ) example_delete_secret_with_recovery_window() ``` \"\"\" if not force_delete_without_recovery and not ( 7 <= recovery_window_in_days <= 30 ): raise ValueError ( \"Recovery window must be between 7 and 30 days.\" ) delete_secret_kwargs : Dict [ str , Union [ str , int , bool ]] = dict ( SecretId = secret_name ) if force_delete_without_recovery : delete_secret_kwargs [ \"ForceDeleteWithoutRecovery\" ] = force_delete_without_recovery else : delete_secret_kwargs [ \"RecoveryWindowInDays\" ] = recovery_window_in_days logger = get_run_logger () logger . info ( \"Deleting secret %s \" , secret_name ) client = aws_credentials . get_boto3_session () . client ( \"secretsmanager\" ) try : response = await run_sync_in_worker_thread ( client . delete_secret , ** delete_secret_kwargs ) response . pop ( \"ResponseMetadata\" , None ) return response except ClientError : logger . exception ( \"Unable to delete secret %s \" , secret_name ) raise","title":"delete_secret()"},{"location":"secrets_manager/#prefect_aws.secrets_manager.read_secret","text":"Reads the value of a given secret from AWS Secrets Manager. Parameters: Name Type Description Default secret_name str Name of stored secret. required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required version_id Optional [ str ] Specifies version of secret to read. Defaults to the most recent version if not given. None version_stage Optional [ str ] Specifies the version stage of the secret to read. Defaults to AWS_CURRENT if not given. None Returns: Type Description Union [ str , bytes ] The secret values as a str or bytes depending on the format in which the secret was stored. Example Read a secret value: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import read_secret @flow def example_read_secret (): aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) secret_value = read_secret ( secret_name = \"db_password\" , aws_credentials = aws_credentials ) example_read_secret () Source code in prefect_aws/secrets_manager.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 @task async def read_secret ( secret_name : str , aws_credentials : AwsCredentials , version_id : Optional [ str ] = None , version_stage : Optional [ str ] = None , ) -> Union [ str , bytes ]: \"\"\" Reads the value of a given secret from AWS Secrets Manager. Args: secret_name: Name of stored secret. aws_credentials: Credentials to use for authentication with AWS. version_id: Specifies version of secret to read. Defaults to the most recent version if not given. version_stage: Specifies the version stage of the secret to read. Defaults to AWS_CURRENT if not given. Returns: The secret values as a `str` or `bytes` depending on the format in which the secret was stored. Example: Read a secret value: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import read_secret @flow def example_read_secret(): aws_credentials = AwsCredentials( aws_access_key_id=\"access_key_id\", aws_secret_access_key=\"secret_access_key\" ) secret_value = read_secret( secret_name=\"db_password\", aws_credentials=aws_credentials ) example_read_secret() ``` \"\"\" logger = get_run_logger () logger . info ( \"Getting value for secret %s \" , secret_name ) client = aws_credentials . get_boto3_session () . client ( \"secretsmanager\" ) get_secret_value_kwargs = dict ( SecretId = secret_name ) if version_id is not None : get_secret_value_kwargs [ \"VersionId\" ] = version_id if version_stage is not None : get_secret_value_kwargs [ \"VersionStage\" ] = version_stage try : response = await run_sync_in_worker_thread ( client . get_secret_value , ** get_secret_value_kwargs ) except ClientError : logger . exception ( \"Unable to get value for secret %s \" , secret_name ) raise else : return response . get ( \"SecretString\" ) or response . get ( \"SecretBinary\" )","title":"read_secret()"},{"location":"secrets_manager/#prefect_aws.secrets_manager.update_secret","text":"Updates the value of a given secret in AWS Secrets Manager. Parameters: Name Type Description Default secret_name str Name of secret to update. required secret_value Union [ str , bytes ] Desired value of the secret. Can be either str or bytes . required aws_credentials AwsCredentials Credentials to use for authentication with AWS. required description Optional [ str ] Desired description of the secret. None Returns: Type Description Dict [ str , str ] Dict[str, str]: A dict containing the secret ARN (Amazon Resource Name), name, and current version ID. { \"ARN\" : str , \"Name\" : str , \"VersionId\" : str } Example Update a secret value: from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import update_secret @flow def example_update_secret (): aws_credentials = AwsCredentials ( aws_access_key_id = \"access_key_id\" , aws_secret_access_key = \"secret_access_key\" ) update_secret ( secret_name = \"life_the_universe_and_everything\" , secret_value = \"42\" , aws_credentials = aws_credentials ) example_update_secret () Source code in prefect_aws/secrets_manager.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 @task async def update_secret ( secret_name : str , secret_value : Union [ str , bytes ], aws_credentials : AwsCredentials , description : Optional [ str ] = None , ) -> Dict [ str , str ]: \"\"\" Updates the value of a given secret in AWS Secrets Manager. Args: secret_name: Name of secret to update. secret_value: Desired value of the secret. Can be either `str` or `bytes`. aws_credentials: Credentials to use for authentication with AWS. description: Desired description of the secret. Returns: Dict[str, str]: A dict containing the secret ARN (Amazon Resource Name), name, and current version ID. ```python { \"ARN\": str, \"Name\": str, \"VersionId\": str } ``` Example: Update a secret value: ```python from prefect import flow from prefect_aws import AwsCredentials from prefect_aws.secrets_manager import update_secret @flow def example_update_secret(): aws_credentials = AwsCredentials( aws_access_key_id=\"access_key_id\", aws_secret_access_key=\"secret_access_key\" ) update_secret( secret_name=\"life_the_universe_and_everything\", secret_value=\"42\", aws_credentials=aws_credentials ) example_update_secret() ``` \"\"\" update_secret_kwargs : Dict [ str , Union [ str , bytes ]] = dict ( SecretId = secret_name ) if description is not None : update_secret_kwargs [ \"Description\" ] = description if isinstance ( secret_value , bytes ): update_secret_kwargs [ \"SecretBinary\" ] = secret_value elif isinstance ( secret_value , str ): update_secret_kwargs [ \"SecretString\" ] = secret_value else : raise ValueError ( \"Please provide a bytes or str value for secret_value\" ) logger = get_run_logger () logger . info ( \"Updating value for secret %s \" , secret_name ) client = aws_credentials . get_boto3_session () . client ( \"secretsmanager\" ) try : response = await run_sync_in_worker_thread ( client . update_secret , ** update_secret_kwargs ) response . pop ( \"ResponseMetadata\" , None ) return response except ClientError : logger . exception ( \"Unable to update secret %s \" , secret_name ) raise","title":"update_secret()"}]}